{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# FarmBot Kerala - AI Assistant for Kerala Farmers\n\n## Overview\n\nFarmBot Kerala is a ChatGPT-like conversational interface designed specifically for Kerala farmers. The application provides a mobile-first, farmer-friendly platform that offers AI-powered agricultural assistance in both English and Malayalam. The system includes features for AI chat, smart farming suggestions, weather monitoring, market price tracking, and community interaction.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **PWA Support**: Service worker implementation for offline functionality\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful endpoints with proper error handling and logging middleware\n- **Development**: Hot reload with Vite integration in development mode\n\n### Data Storage Solutions\n- **ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database**: PostgreSQL (configured via Neon serverless)\n- **Schema**: Centralized schema definitions in `/shared` directory\n- **Migration**: Drizzle Kit for database migrations and schema management\n- **Development Storage**: In-memory storage implementation for development/testing\n\n### Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (connect-pg-simple)\n- **User Identification**: UUID-based farmer profiles stored in localStorage\n- **Security**: CORS handling and request validation\n\n### Core Features Architecture\n\n#### AI Chat System\n- **Provider**: OpenAI API integration with GPT-5 model\n- **Context Awareness**: Farmer profile-based contextual responses\n- **Voice Support**: Web Speech API for voice input and text-to-speech output\n- **Multilingual**: English and Malayalam language support\n\n#### Smart Suggestions Engine\n- **AI-Generated**: Proactive farming advice based on farmer profile and seasonal data\n- **Task Management**: Priority-based suggestion system with completion tracking\n- **Personalization**: Crop-specific and location-aware recommendations\n\n#### Weather Integration\n- **Real-time Data**: Weather API integration for Kerala districts\n- **Farming Advice**: Weather-based agricultural recommendations\n- **Forecast Display**: Multi-day weather predictions with farming implications\n\n#### Market Price System\n- **Live Pricing**: Real-time market price tracking for Kerala crops\n- **Trend Analysis**: Price movement indicators and market insights\n- **District-wise Data**: Location-specific market information\n\n#### Community Platform\n- **Discussion Forums**: Farmer-to-farmer knowledge sharing\n- **Content Management**: Post creation, likes, and reply system\n- **Topic Organization**: Hashtag-based content categorization\n\n### Mobile-First Design\n- **Responsive Layout**: Tailwind CSS breakpoints for mobile optimization\n- **Touch Interactions**: Large, farmer-friendly buttons and touch targets\n- **Offline Capability**: Service worker for offline farming tips and core functionality\n- **Performance**: Optimized bundle size and lazy loading\n\n### Theme System\n- **Dark/Light Mode**: Complete theme switching with CSS custom properties\n- **Kerala-Inspired Colors**: Agricultural green and orange color scheme\n- **Accessibility**: High contrast ratios and semantic color naming\n\n### Internationalization\n- **Language Support**: English and Malayalam with easy extensibility\n- **Translation System**: Custom translation hook with parameter interpolation\n- **Cultural Adaptation**: Kerala-specific farming terminology and practices\n\n## External Dependencies\n\n### AI and Language Processing\n- **OpenAI API**: GPT-5 model for conversational AI and farming advice generation\n- **Web Speech API**: Browser-native voice recognition and text-to-speech\n\n### Database and Storage\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n### UI and Styling\n- **Radix UI**: Accessible primitive components\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n\n### Development and Build\n- **Vite**: Fast build tool with HMR support\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundling for production\n\n### Utilities and Tools\n- **TanStack Query**: Server state management and caching\n- **Zod**: Runtime type validation and schema parsing\n- **date-fns**: Date manipulation and formatting\n\n### Kerala-Specific Data\n- **District Information**: 14 Kerala districts with climate and geographical data\n- **Crop Calendar**: Traditional Kerala farming seasons and crop rotation data\n- **Land Types**: Kerala-specific land classifications (coastal, midland, highland)\n- **Local Practices**: Integration of traditional Kerala farming methods","size_bytes":5198},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Nunito\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2759},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertFarmerSchema, insertChatMessageSchema, insertSuggestionSchema } from \"@shared/schema\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\" \n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Farmer profile routes\n  app.post(\"/api/farmers\", async (req, res) => {\n    try {\n      const farmerData = insertFarmerSchema.parse(req.body);\n      const farmer = await storage.createFarmer(farmerData);\n      \n      // Generate initial suggestions based on farmer profile\n      await generateInitialSuggestions(farmer.id, farmerData);\n      \n      res.json(farmer);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/farmers/:id\", async (req, res) => {\n    try {\n      const farmer = await storage.getFarmer(req.params.id);\n      if (!farmer) {\n        return res.status(404).json({ message: \"Farmer not found\" });\n      }\n      res.json(farmer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/farmers/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const farmer = await storage.updateFarmer(req.params.id, updates);\n      if (!farmer) {\n        return res.status(404).json({ message: \"Farmer not found\" });\n      }\n      res.json(farmer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Chat routes\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const messageData = insertChatMessageSchema.parse(req.body);\n      const chatMessage = await storage.createChatMessage(messageData);\n      \n      // Get farmer context for personalized response\n      const farmer = await storage.getFarmer(messageData.farmerId!);\n      \n      // Generate AI response\n      const aiResponse = await generateFarmingResponse(messageData.message, farmer);\n      \n      // Update chat message with response\n      const updatedMessage = await storage.updateChatMessage(chatMessage.id, aiResponse);\n      \n      res.json(updatedMessage);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/chat/:farmerId\", async (req, res) => {\n    try {\n      const messages = await storage.getChatMessages(req.params.farmerId);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Suggestions routes\n  app.get(\"/api/suggestions/:farmerId\", async (req, res) => {\n    try {\n      const suggestions = await storage.getSuggestions(req.params.farmerId);\n      res.json(suggestions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/suggestions/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const suggestion = await storage.updateSuggestion(req.params.id, updates);\n      if (!suggestion) {\n        return res.status(404).json({ message: \"Suggestion not found\" });\n      }\n      res.json(suggestion);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Weather routes\n  app.get(\"/api/weather/:district\", async (req, res) => {\n    try {\n      let weather = await storage.getWeatherData(req.params.district);\n      \n      // If no recent weather data, fetch from external API or generate sample\n      if (!weather || isWeatherDataStale(weather)) {\n        weather = await fetchWeatherData(req.params.district);\n      }\n      \n      res.json(weather);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Market prices routes\n  app.get(\"/api/market-prices\", async (req, res) => {\n    try {\n      const district = req.query.district as string;\n      let prices = await storage.getMarketPrices(district);\n      \n      // If no recent price data, generate sample data\n      if (prices.length === 0) {\n        prices = await generateSampleMarketPrices(district);\n      }\n      \n      res.json(prices);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Generate farming suggestions\n  app.post(\"/api/generate-suggestions/:farmerId\", async (req, res) => {\n    try {\n      const farmer = await storage.getFarmer(req.params.farmerId);\n      if (!farmer) {\n        return res.status(404).json({ message: \"Farmer not found\" });\n      }\n      \n      await generateSeasonalSuggestions(farmer.id, farmer);\n      const suggestions = await storage.getSuggestions(farmer.id);\n      \n      res.json(suggestions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper functions\nasync function generateFarmingResponse(message: string, farmer: any): Promise<string> {\n  try {\n    const context = farmer ? `\n      Farmer Profile:\n      - Name: ${farmer.name}\n      - Location: ${farmer.district}, Kerala\n      - Land Size: ${farmer.landSize}\n      - Land Type: ${farmer.landType}\n      - Crops: ${farmer.crops?.join(', ')}\n      - Experience: ${farmer.experience}\n    ` : '';\n\n    const prompt = `You are FarmBot, an AI assistant specialized in Kerala farming practices. \n    ${context}\n    \n    Farmer's question: \"${message}\"\n    \n    Provide helpful, practical farming advice specific to Kerala's climate, soil, and agricultural practices. \n    Keep responses concise but informative. Use simple language. Include emojis when appropriate.\n    If relevant, mention timing based on Kerala's seasons (monsoon, post-monsoon, summer).\n    \n    Response format should be natural and conversational, not structured JSON.`;\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      max_tokens: 500,\n    });\n\n    return response.choices[0]?.message?.content || \"I'm sorry, I couldn't process your question. Please try again.\";\n  } catch (error) {\n    console.error(\"OpenAI API error:\", error);\n    return \"I'm having trouble connecting to my knowledge base. Please check your internet connection and try again.\";\n  }\n}\n\nasync function generateInitialSuggestions(farmerId: string, farmer: any): Promise<void> {\n  try {\n    const prompt = `Generate 3 farming suggestions for a Kerala farmer with this profile:\n    - District: ${farmer.district}\n    - Land Size: ${farmer.landSize}  \n    - Land Type: ${farmer.landType}\n    - Crops: ${farmer.crops?.join(', ')}\n    - Experience: ${farmer.experience}\n    \n    Current season: December (post-monsoon)\n    \n    Provide suggestions in JSON format:\n    {\n      \"suggestions\": [\n        {\n          \"title\": \"Brief action title\",\n          \"description\": \"Detailed description\", \n          \"priority\": \"high|medium|low\",\n          \"category\": \"planting|care|harvest|pest|fertilizer|irrigation\"\n        }\n      ]\n    }`;\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0]?.message?.content || '{\"suggestions\":[]}');\n    \n    for (const suggestion of result.suggestions) {\n      await storage.createSuggestion({\n        farmerId,\n        title: suggestion.title,\n        description: suggestion.description,\n        priority: suggestion.priority,\n        category: suggestion.category,\n        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 1 week from now\n      });\n    }\n  } catch (error) {\n    console.error(\"Error generating initial suggestions:\", error);\n  }\n}\n\nasync function generateSeasonalSuggestions(farmerId: string, farmer: any): Promise<void> {\n  const currentMonth = new Date().getMonth() + 1;\n  const season = getKeralaSeason(currentMonth);\n  \n  try {\n    const prompt = `Generate 2-3 seasonal farming suggestions for ${season} season in Kerala for:\n    - District: ${farmer.district}\n    - Crops: ${farmer.crops?.join(', ')}\n    - Land Type: ${farmer.landType}\n    \n    Focus on seasonal activities like planting, harvesting, pest control, or preparation.\n    \n    Respond in JSON format:\n    {\n      \"suggestions\": [\n        {\n          \"title\": \"Action title\",\n          \"description\": \"Detailed description\",\n          \"priority\": \"high|medium|low\", \n          \"category\": \"seasonal\"\n        }\n      ]\n    }`;\n\n    // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n    const response = await openai.chat.completions.create({\n      model: \"gpt-5\",\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0]?.message?.content || '{\"suggestions\":[]}');\n    \n    for (const suggestion of result.suggestions) {\n      await storage.createSuggestion({\n        farmerId,\n        title: suggestion.title,\n        description: suggestion.description,\n        priority: suggestion.priority,\n        category: suggestion.category,\n        dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000) // 2 weeks from now\n      });\n    }\n  } catch (error) {\n    console.error(\"Error generating seasonal suggestions:\", error);\n  }\n}\n\nfunction getKeralaSeason(month: number): string {\n  if (month >= 6 && month <= 9) return \"monsoon\";\n  if (month >= 10 && month <= 2) return \"post-monsoon\"; \n  return \"summer\";\n}\n\nasync function fetchWeatherData(district: string): Promise<any> {\n  // In a real app, this would call a weather API\n  // For now, return sample data\n  const weatherData = {\n    district,\n    temperature: \"28°C\",\n    humidity: \"78%\",\n    rainfall: \"Light rain expected\",\n    forecast: [\n      { day: \"Today\", temp: \"32°/24°\", condition: \"Sunny\", rain: \"0%\" },\n      { day: \"Tomorrow\", temp: \"29°/23°\", condition: \"Light Rain\", rain: \"60%\" },\n      { day: \"Wednesday\", temp: \"30°/24°\", condition: \"Cloudy\", rain: \"20%\" }\n    ],\n    farmingAdvice: \"Good conditions for planting vegetables. Delay irrigation due to expected rainfall.\"\n  };\n  \n  return await storage.createWeatherData(weatherData);\n}\n\nfunction isWeatherDataStale(weather: any): boolean {\n  const sixHoursAgo = new Date(Date.now() - 6 * 60 * 60 * 1000);\n  return weather.timestamp < sixHoursAgo;\n}\n\nasync function generateSampleMarketPrices(district?: string): Promise<any[]> {\n  const crops = [\n    { crop: \"Tomatoes\", pricePerKg: \"₹45\", change: \"+15%\", trend: \"up\" },\n    { crop: \"Chilli\", pricePerKg: \"₹120\", change: \"-8%\", trend: \"down\" },\n    { crop: \"Onions\", pricePerKg: \"₹35\", change: \"0%\", trend: \"stable\" },\n    { crop: \"Rice\", pricePerKg: \"₹2,800\", change: \"+5%\", trend: \"up\" },\n    { crop: \"Coconut\", pricePerKg: \"₹25\", change: \"+3%\", trend: \"up\" }\n  ];\n\n  const prices = [];\n  for (const cropData of crops) {\n    const price = await storage.createMarketPrice({\n      ...cropData,\n      district: district || \"Kerala\"\n    });\n    prices.push(price);\n  }\n  \n  return prices;\n}\n","size_bytes":11541},"server/storage.ts":{"content":"import { \n  type Farmer, \n  type InsertFarmer,\n  type ChatMessage,\n  type InsertChatMessage,\n  type Suggestion,\n  type InsertSuggestion,\n  type WeatherData,\n  type MarketPrice\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Farmer operations\n  getFarmer(id: string): Promise<Farmer | undefined>;\n  createFarmer(farmer: InsertFarmer): Promise<Farmer>;\n  updateFarmer(id: string, farmer: Partial<Farmer>): Promise<Farmer | undefined>;\n  \n  // Chat operations\n  getChatMessages(farmerId: string): Promise<ChatMessage[]>;\n  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  updateChatMessage(id: string, response: string): Promise<ChatMessage | undefined>;\n  \n  // Suggestion operations\n  getSuggestions(farmerId: string): Promise<Suggestion[]>;\n  createSuggestion(suggestion: InsertSuggestion): Promise<Suggestion>;\n  updateSuggestion(id: string, updates: Partial<Suggestion>): Promise<Suggestion | undefined>;\n  \n  // Weather operations\n  getWeatherData(district: string): Promise<WeatherData | undefined>;\n  createWeatherData(weather: Omit<WeatherData, 'id' | 'timestamp'>): Promise<WeatherData>;\n  \n  // Market operations\n  getMarketPrices(district?: string): Promise<MarketPrice[]>;\n  createMarketPrice(price: Omit<MarketPrice, 'id' | 'date'>): Promise<MarketPrice>;\n}\n\nexport class MemStorage implements IStorage {\n  private farmers: Map<string, Farmer> = new Map();\n  private chatMessages: Map<string, ChatMessage> = new Map();\n  private suggestions: Map<string, Suggestion> = new Map();\n  private weatherData: Map<string, WeatherData> = new Map();\n  private marketPrices: Map<string, MarketPrice> = new Map();\n\n  async getFarmer(id: string): Promise<Farmer | undefined> {\n    return this.farmers.get(id) || undefined;\n  }\n\n  async createFarmer(insertFarmer: InsertFarmer): Promise<Farmer> {\n    const id = randomUUID();\n    const farmer: Farmer = { \n      ...insertFarmer, \n      crops: insertFarmer.crops as string[],\n      id, \n      language: insertFarmer.language || \"en\",\n      createdAt: new Date() \n    };\n    this.farmers.set(id, farmer);\n    return farmer;\n  }\n\n  async updateFarmer(id: string, updates: Partial<Farmer>): Promise<Farmer | undefined> {\n    const farmer = this.farmers.get(id);\n    if (!farmer) return undefined;\n    \n    const updatedFarmer = { ...farmer, ...updates };\n    this.farmers.set(id, updatedFarmer);\n    return updatedFarmer;\n  }\n\n  async getChatMessages(farmerId: string): Promise<ChatMessage[]> {\n    return Array.from(this.chatMessages.values())\n      .filter(msg => msg.farmerId === farmerId)\n      .sort((a, b) => (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0));\n  }\n\n  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {\n    const id = randomUUID();\n    const message: ChatMessage = {\n      ...insertMessage,\n      farmerId: insertMessage.farmerId || null,\n      isVoice: insertMessage.isVoice || false,\n      id,\n      response: null,\n      timestamp: new Date()\n    };\n    this.chatMessages.set(id, message);\n    return message;\n  }\n\n  async updateChatMessage(id: string, response: string): Promise<ChatMessage | undefined> {\n    const message = this.chatMessages.get(id);\n    if (!message) return undefined;\n    \n    const updatedMessage = { ...message, response };\n    this.chatMessages.set(id, updatedMessage);\n    return updatedMessage;\n  }\n\n  async getSuggestions(farmerId: string): Promise<Suggestion[]> {\n    return Array.from(this.suggestions.values())\n      .filter(suggestion => suggestion.farmerId === farmerId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createSuggestion(insertSuggestion: InsertSuggestion): Promise<Suggestion> {\n    const id = randomUUID();\n    const suggestion: Suggestion = {\n      ...insertSuggestion,\n      farmerId: insertSuggestion.farmerId || null,\n      dueDate: insertSuggestion.dueDate || null,\n      id,\n      isCompleted: false,\n      createdAt: new Date()\n    };\n    this.suggestions.set(id, suggestion);\n    return suggestion;\n  }\n\n  async updateSuggestion(id: string, updates: Partial<Suggestion>): Promise<Suggestion | undefined> {\n    const suggestion = this.suggestions.get(id);\n    if (!suggestion) return undefined;\n    \n    const updatedSuggestion = { ...suggestion, ...updates };\n    this.suggestions.set(id, updatedSuggestion);\n    return updatedSuggestion;\n  }\n\n  async getWeatherData(district: string): Promise<WeatherData | undefined> {\n    return Array.from(this.weatherData.values())\n      .find(weather => weather.district.toLowerCase() === district.toLowerCase());\n  }\n\n  async createWeatherData(weather: Omit<WeatherData, 'id' | 'timestamp'>): Promise<WeatherData> {\n    const id = randomUUID();\n    const weatherData: WeatherData = {\n      ...weather,\n      id,\n      timestamp: new Date()\n    };\n    this.weatherData.set(id, weatherData);\n    return weatherData;\n  }\n\n  async getMarketPrices(district?: string): Promise<MarketPrice[]> {\n    const prices = Array.from(this.marketPrices.values());\n    if (district) {\n      return prices.filter(price => \n        price.district?.toLowerCase() === district.toLowerCase()\n      );\n    }\n    return prices.sort((a, b) => (b.date?.getTime() || 0) - (a.date?.getTime() || 0));\n  }\n\n  async createMarketPrice(price: Omit<MarketPrice, 'id' | 'date'>): Promise<MarketPrice> {\n    const id = randomUUID();\n    const marketPrice: MarketPrice = {\n      ...price,\n      id,\n      date: new Date()\n    };\n    this.marketPrices.set(id, marketPrice);\n    return marketPrice;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5637},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const farmers = pgTable(\"farmers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  district: text(\"district\").notNull(),\n  landSize: text(\"land_size\").notNull(),\n  landType: text(\"land_type\").notNull(),\n  crops: jsonb(\"crops\").$type<string[]>().notNull(),\n  experience: text(\"experience\").notNull(),\n  language: text(\"language\").default(\"en\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  farmerId: varchar(\"farmer_id\").references(() => farmers.id),\n  message: text(\"message\").notNull(),\n  response: text(\"response\"),\n  isVoice: boolean(\"is_voice\").default(false),\n  timestamp: timestamp(\"timestamp\").default(sql`now()`),\n});\n\nexport const suggestions = pgTable(\"suggestions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  farmerId: varchar(\"farmer_id\").references(() => farmers.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  priority: text(\"priority\").notNull(),\n  category: text(\"category\").notNull(),\n  isCompleted: boolean(\"is_completed\").default(false),\n  dueDate: timestamp(\"due_date\"),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const weatherData = pgTable(\"weather_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  district: text(\"district\").notNull(),\n  temperature: text(\"temperature\"),\n  humidity: text(\"humidity\"),\n  rainfall: text(\"rainfall\"),\n  forecast: jsonb(\"forecast\"),\n  farmingAdvice: text(\"farming_advice\"),\n  timestamp: timestamp(\"timestamp\").default(sql`now()`),\n});\n\nexport const marketPrices = pgTable(\"market_prices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  crop: text(\"crop\").notNull(),\n  pricePerKg: text(\"price_per_kg\"),\n  district: text(\"district\"),\n  change: text(\"change\"),\n  trend: text(\"trend\"),\n  date: timestamp(\"date\").default(sql`now()`),\n});\n\nexport const insertFarmerSchema = createInsertSchema(farmers).pick({\n  name: true,\n  district: true,\n  landSize: true,\n  landType: true,\n  crops: true,\n  experience: true,\n  language: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).pick({\n  farmerId: true,\n  message: true,\n  isVoice: true,\n});\n\nexport const insertSuggestionSchema = createInsertSchema(suggestions).pick({\n  farmerId: true,\n  title: true,\n  description: true,\n  priority: true,\n  category: true,\n  dueDate: true,\n});\n\nexport type InsertFarmer = z.infer<typeof insertFarmerSchema>;\nexport type Farmer = typeof farmers.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertSuggestion = z.infer<typeof insertSuggestionSchema>;\nexport type Suggestion = typeof suggestions.$inferSelect;\nexport type WeatherData = typeof weatherData.$inferSelect;\nexport type MarketPrice = typeof marketPrices.$inferSelect;\n","size_bytes":3246},"client/public/sw.js":{"content":"const CACHE_NAME = 'farmbot-kerala-v1';\nconst urlsToCache = [\n  '/',\n  '/app',\n  '/static/css/main.css',\n  '/static/js/main.js',\n  '/static/media/logo.svg',\n  'https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700&display=swap',\n  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css'\n];\n\n// Farming advice and tips that can work offline\nconst OFFLINE_FARMING_TIPS = [\n  {\n    id: 'tip-1',\n    title: 'Best Time for Irrigation',\n    content: 'Water your crops early morning (6-8 AM) or late evening (5-7 PM) to reduce water loss through evaporation.',\n    category: 'irrigation'\n  },\n  {\n    id: 'tip-2',\n    title: 'Organic Pest Control',\n    content: 'Use neem oil spray (2-3ml per liter water) to control most common pests naturally.',\n    category: 'pest-control'\n  },\n  {\n    id: 'tip-3',\n    title: 'Monsoon Preparation',\n    content: 'Clean drainage channels and secure plant supports before monsoon arrives to prevent waterlogging and wind damage.',\n    category: 'seasonal'\n  },\n  {\n    id: 'tip-4',\n    title: 'Soil Health Check',\n    content: 'Test soil pH every 6 months. Most Kerala crops prefer slightly acidic soil (pH 6.0-6.8).',\n    category: 'soil'\n  },\n  {\n    id: 'tip-5',\n    title: 'Coconut Tree Care',\n    content: 'Remove dead fronds monthly and apply organic manure twice yearly around the base for better yield.',\n    category: 'crops'\n  }\n];\n\n// Install service worker and cache resources\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n      .catch((error) => {\n        console.log('Cache installation failed:', error);\n      })\n  );\n});\n\n// Fetch event - serve from cache when offline\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n\n        // Special handling for API requests when offline\n        if (event.request.url.includes('/api/')) {\n          return handleOfflineApiRequest(event.request);\n        }\n\n        return fetch(event.request).catch(() => {\n          // Return offline page for navigation requests\n          if (event.request.mode === 'navigate') {\n            return caches.match('/');\n          }\n        });\n      })\n  );\n});\n\n// Handle API requests when offline\nfunction handleOfflineApiRequest(request) {\n  const url = new URL(request.url);\n  const pathname = url.pathname;\n\n  // Handle different API endpoints when offline\n  if (pathname.includes('/api/chat')) {\n    return new Response(JSON.stringify({\n      id: 'offline-' + Date.now(),\n      message: request.method === 'GET' ? [] : request.body,\n      response: \"I'm currently offline. Here are some helpful farming tips:\\n\\n\" + \n               getRandomFarmingTip() + \n               \"\\n\\nPlease connect to internet for personalized AI assistance.\",\n      isVoice: false,\n      timestamp: new Date().toISOString()\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  if (pathname.includes('/api/suggestions')) {\n    return new Response(JSON.stringify(getOfflineSuggestions()), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  if (pathname.includes('/api/weather')) {\n    return new Response(JSON.stringify({\n      error: 'Weather data requires internet connection',\n      message: 'Please connect to internet for current weather information',\n      offline: true\n    }), {\n      status: 503,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  if (pathname.includes('/api/market-prices')) {\n    return new Response(JSON.stringify({\n      error: 'Market prices require internet connection',\n      message: 'Please connect to internet for current market prices',\n      offline: true\n    }), {\n      status: 503,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Default offline response\n  return new Response(JSON.stringify({\n    error: 'Service unavailable offline',\n    message: 'This feature requires internet connection'\n  }), {\n    status: 503,\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n\n// Get random farming tip for offline use\nfunction getRandomFarmingTip() {\n  const randomIndex = Math.floor(Math.random() * OFFLINE_FARMING_TIPS.length);\n  const tip = OFFLINE_FARMING_TIPS[randomIndex];\n  return `💡 ${tip.title}\\n\\n${tip.content}`;\n}\n\n// Generate offline suggestions\nfunction getOfflineSuggestions() {\n  const currentMonth = new Date().getMonth() + 1;\n  const suggestions = [];\n\n  // Seasonal suggestions based on month\n  if (currentMonth >= 10 && currentMonth <= 2) {\n    suggestions.push({\n      id: 'offline-winter-veg',\n      title: 'Plant Winter Vegetables',\n      description: 'Perfect time for leafy greens, carrots, and beans in Kerala climate.',\n      priority: 'high',\n      category: 'planting',\n      isCompleted: false,\n      dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()\n    });\n  }\n\n  if (currentMonth >= 3 && currentMonth <= 5) {\n    suggestions.push({\n      id: 'offline-summer-prep',\n      title: 'Prepare for Summer',\n      description: 'Set up shade nets and check irrigation systems before hot weather.',\n      priority: 'high',\n      category: 'seasonal',\n      isCompleted: false,\n      dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString()\n    });\n  }\n\n  if (currentMonth >= 6 && currentMonth <= 9) {\n    suggestions.push({\n      id: 'offline-monsoon-care',\n      title: 'Monsoon Field Care',\n      description: 'Check drainage, prevent waterlogging, and manage fungal diseases.',\n      priority: 'medium',\n      category: 'care',\n      isCompleted: false,\n      dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString()\n    });\n  }\n\n  // Always include these general suggestions\n  suggestions.push(\n    {\n      id: 'offline-soil-test',\n      title: 'Monthly Soil Check',\n      description: 'Check soil moisture and pH levels for optimal crop growth.',\n      priority: 'medium',\n      category: 'care',\n      isCompleted: false,\n      dueDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString()\n    },\n    {\n      id: 'offline-pest-inspection',\n      title: 'Pest Inspection',\n      description: 'Regular inspection of crops for early pest and disease detection.',\n      priority: 'medium',\n      category: 'pest',\n      isCompleted: false,\n      dueDate: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString()\n    }\n  );\n\n  return suggestions.slice(0, 3);\n}\n\n// Update cache when new version is available\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n\n// Handle push notifications for farming alerts\nself.addEventListener('push', (event) => {\n  if (!event.data) return;\n\n  const data = event.data.json();\n  const options = {\n    body: data.body || 'New farming alert available',\n    icon: '/static/media/logo.svg',\n    badge: '/static/media/badge.png',\n    vibrate: [200, 100, 200],\n    data: {\n      url: data.url || '/'\n    },\n    actions: [\n      {\n        action: 'view',\n        title: 'View Details',\n        icon: '/static/media/view.png'\n      },\n      {\n        action: 'dismiss',\n        title: 'Dismiss',\n        icon: '/static/media/dismiss.png'\n      }\n    ]\n  };\n\n  event.waitUntil(\n    self.registration.showNotification(data.title || 'FarmBot Kerala', options)\n  );\n});\n\n// Handle notification clicks\nself.addEventListener('notificationclick', (event) => {\n  event.notification.close();\n\n  if (event.action === 'view' || !event.action) {\n    event.waitUntil(\n      clients.openWindow(event.notification.data.url || '/')\n    );\n  }\n});\n\n// Background sync for offline actions\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'offline-chat-sync') {\n    event.waitUntil(syncOfflineChats());\n  }\n  \n  if (event.tag === 'offline-suggestions-sync') {\n    event.waitUntil(syncOfflineSuggestions());\n  }\n});\n\n// Sync offline chat messages when connection is restored\nasync function syncOfflineChats() {\n  try {\n    // Get offline messages from IndexedDB or localStorage\n    const offlineMessages = JSON.parse(localStorage.getItem('offlineMessages') || '[]');\n    \n    if (offlineMessages.length === 0) return;\n\n    // Send each message to the server\n    for (const message of offlineMessages) {\n      try {\n        const response = await fetch('/api/chat', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(message)\n        });\n        \n        if (response.ok) {\n          // Remove synced message from offline storage\n          const index = offlineMessages.indexOf(message);\n          offlineMessages.splice(index, 1);\n        }\n      } catch (error) {\n        console.log('Failed to sync message:', error);\n        break; // Stop syncing if network is still unavailable\n      }\n    }\n\n    // Update offline storage with remaining messages\n    localStorage.setItem('offlineMessages', JSON.stringify(offlineMessages));\n  } catch (error) {\n    console.log('Offline chat sync failed:', error);\n  }\n}\n\n// Sync offline suggestion updates when connection is restored\nasync function syncOfflineSuggestions() {\n  try {\n    const offlineUpdates = JSON.parse(localStorage.getItem('offlineSuggestionUpdates') || '[]');\n    \n    if (offlineUpdates.length === 0) return;\n\n    for (const update of offlineUpdates) {\n      try {\n        const response = await fetch(`/api/suggestions/${update.id}`, {\n          method: 'PATCH',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(update.data)\n        });\n        \n        if (response.ok) {\n          const index = offlineUpdates.indexOf(update);\n          offlineUpdates.splice(index, 1);\n        }\n      } catch (error) {\n        console.log('Failed to sync suggestion update:', error);\n        break;\n      }\n    }\n\n    localStorage.setItem('offlineSuggestionUpdates', JSON.stringify(offlineUpdates));\n  } catch (error) {\n    console.log('Offline suggestions sync failed:', error);\n  }\n}\n","size_bytes":10528},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { LanguageProvider } from \"@/hooks/use-language\";\nimport OnboardingPage from \"@/pages/onboarding\";\nimport MainAppPage from \"@/pages/main-app\";\nimport NotFound from \"@/pages/not-found\";\nimport { useEffect } from \"react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={OnboardingPage} />\n      <Route path=\"/app\" component={MainAppPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    // Register service worker for PWA functionality\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register('/sw.js')\n        .then((registration) => {\n          console.log('SW registered: ', registration);\n        })\n        .catch((registrationError) => {\n          console.log('SW registration failed: ', registrationError);\n        });\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <LanguageProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </LanguageProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1492},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(120, 15%, 97%);\n  --foreground: hsl(120, 10%, 9%);\n  --card: hsl(120, 20%, 100%);\n  --card-foreground: hsl(120, 10%, 9%);\n  --popover: hsl(120, 20%, 100%);\n  --popover-foreground: hsl(120, 10%, 9%);\n  --primary: hsl(142, 76%, 36%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(120, 5%, 64%);\n  --secondary-foreground: hsl(120, 10%, 9%);\n  --muted: hsl(120, 10%, 95%);\n  --muted-foreground: hsl(120, 6%, 46%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(120, 13%, 91%);\n  --input: hsl(120, 13%, 91%);\n  --ring: hsl(142, 76%, 36%);\n  --chart-1: hsl(142, 76%, 36%);\n  --chart-2: hsl(159, 100%, 36%);\n  --chart-3: hsl(24, 95%, 53%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(120, 20%, 100%);\n  --sidebar-foreground: hsl(120, 10%, 9%);\n  --sidebar-primary: hsl(142, 76%, 36%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(120, 10%, 95%);\n  --sidebar-accent-foreground: hsl(142, 76%, 36%);\n  --sidebar-border: hsl(120, 13%, 91%);\n  --sidebar-ring: hsl(142, 76%, 36%);\n  --font-sans: 'Nunito', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(120, 15%, 7%);\n  --foreground: hsl(120, 5%, 90%);\n  --card: hsl(120, 10%, 10%);\n  --card-foreground: hsl(120, 5%, 90%);\n  --popover: hsl(120, 10%, 10%);\n  --popover-foreground: hsl(120, 5%, 90%);\n  --primary: hsl(142, 86%, 28%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(120, 5%, 25%);\n  --secondary-foreground: hsl(120, 5%, 90%);\n  --muted: hsl(120, 10%, 15%);\n  --muted-foreground: hsl(120, 6%, 63%);\n  --accent: hsl(24, 95%, 53%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(120, 13%, 15%);\n  --input: hsl(120, 13%, 15%);\n  --ring: hsl(142, 86%, 28%);\n  --sidebar: hsl(120, 10%, 10%);\n  --sidebar-foreground: hsl(120, 5%, 90%);\n  --sidebar-primary: hsl(142, 86%, 28%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(120, 10%, 15%);\n  --sidebar-accent-foreground: hsl(142, 86%, 28%);\n  --sidebar-border: hsl(120, 13%, 15%);\n  --sidebar-ring: hsl(142, 86%, 28%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Nunito', sans-serif;\n  }\n\n  .chat-bubble-user {\n    background: linear-gradient(135deg, var(--primary) 0%, hsl(142, 86%, 28%) 100%);\n  }\n\n  .chat-bubble-ai {\n    background: var(--card);\n    border: 1px solid var(--border);\n  }\n\n  .voice-recording {\n    animation: pulse 2s infinite;\n  }\n\n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.5; }\n  }\n\n  .tab-active {\n    background: var(--primary);\n    color: var(--primary-foreground);\n  }\n\n  .suggestion-card:hover {\n    transform: translateY(-2px);\n    transition: transform 0.2s ease;\n  }\n}\n","size_bytes":3230},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chat-interface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { useVoice } from \"@/hooks/use-voice\";\nimport { Mic, Send, Volume2, Paperclip, Bot, User, MicOff } from \"lucide-react\";\n\ninterface ChatInterfaceProps {\n  farmerId: string;\n  farmerProfile: any;\n}\n\ninterface ChatMessage {\n  id: string;\n  message: string;\n  response?: string;\n  isVoice: boolean;\n  timestamp: Date;\n}\n\nexport default function ChatInterface({ farmerId, farmerProfile }: ChatInterfaceProps) {\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n  const { t } = useLanguage();\n  const { isRecording, startRecording, stopRecording, transcript, speak } = useVoice();\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { data: chatMessages = [], refetch } = useQuery({\n    queryKey: [\"/api/chat\", farmerId],\n    enabled: !!farmerId,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { message: string; isVoice: boolean }) => {\n      const response = await apiRequest(\"POST\", \"/api/chat\", {\n        farmerId,\n        message: data.message,\n        isVoice: data.isVoice,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      refetch();\n      if (data.response) {\n        speak(data.response);\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"chat.error.title\"),\n        description: error.message || t(\"chat.error.description\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = () => {\n    if (!message.trim()) return;\n    \n    sendMessageMutation.mutate({\n      message: message.trim(),\n      isVoice: false,\n    });\n    setMessage(\"\");\n  };\n\n  const handleVoiceToggle = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n\n  useEffect(() => {\n    if (transcript && !isRecording) {\n      setMessage(transcript);\n      sendMessageMutation.mutate({\n        message: transcript,\n        isVoice: true,\n      });\n    }\n  }, [transcript, isRecording]);\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const suggestedQuestions = [\n    t(\"chat.suggestions.crops\"),\n    t(\"chat.suggestions.fertilizer\"),\n    t(\"chat.suggestions.pest\"),\n    t(\"chat.suggestions.weather\"),\n  ];\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Chat Messages */}\n      <ScrollArea className=\"flex-1 p-4\" ref={scrollAreaRef}>\n        <div className=\"space-y-4\">\n          {/* Welcome Message */}\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"text-primary-foreground\" size={16} />\n            </div>\n            <div className=\"chat-bubble-ai p-4 rounded-lg max-w-[85%]\">\n              <p className=\"text-foreground mb-2\">\n                🌱 {t(\"chat.welcome.message\", { name: farmerProfile?.name || t(\"chat.welcome.farmer\") })}\n              </p>\n              <div className=\"flex flex-wrap gap-2 mt-3\">\n                {suggestedQuestions.map((question, index) => (\n                  <Button\n                    key={index}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setMessage(question);\n                      inputRef.current?.focus();\n                    }}\n                    className=\"bg-primary/10 text-primary hover:bg-primary/20 h-auto p-2 text-xs\"\n                    data-testid={`button-suggestion-${index}`}\n                  >\n                    {question}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Chat Messages */}\n          {(chatMessages as ChatMessage[]).map((msg: ChatMessage) => (\n            <div key={msg.id}>\n              {/* User Message */}\n              <div className=\"flex items-start space-x-3 justify-end mb-4\">\n                <div className=\"chat-bubble-user p-4 rounded-lg max-w-[85%] text-primary-foreground\">\n                  <p>{msg.message}</p>\n                  {msg.isVoice && (\n                    <div className=\"flex items-center mt-2 text-xs opacity-75\">\n                      <Mic size={12} className=\"mr-1\" />\n                      {t(\"chat.voiceMessage\")}\n                    </div>\n                  )}\n                </div>\n                <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center flex-shrink-0\">\n                  <User className=\"text-accent-foreground\" size={16} />\n                </div>\n              </div>\n\n              {/* AI Response */}\n              {msg.response && (\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"text-primary-foreground\" size={16} />\n                  </div>\n                  <div className=\"chat-bubble-ai p-4 rounded-lg max-w-[85%]\">\n                    <p className=\"text-foreground whitespace-pre-wrap\">{msg.response}</p>\n                    <div className=\"flex items-center space-x-2 mt-3\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => speak(msg.response!)}\n                        className=\"p-2 bg-primary/10 hover:bg-primary/20\"\n                        data-testid={`button-speak-${msg.id}`}\n                      >\n                        <Volume2 size={14} className=\"text-primary\" />\n                      </Button>\n                      <span className=\"text-xs text-muted-foreground\">{t(\"chat.listen\")}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n\n          {/* Loading State */}\n          {sendMessageMutation.isPending && (\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0\">\n                <Bot className=\"text-primary-foreground\" size={16} />\n              </div>\n              <div className=\"chat-bubble-ai p-4 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\"></div>\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }}></div>\n                  <div className=\"w-2 h-2 bg-primary rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }}></div>\n                  <span className=\"text-sm text-muted-foreground ml-2\">{t(\"chat.thinking\")}</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Chat Input */}\n      <div className=\"bg-card border-t border-border p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex-1 relative\">\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              value={message}\n              onChange={(e) => setMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={t(\"chat.placeholder\")}\n              className=\"pr-12 text-base h-12\"\n              disabled={sendMessageMutation.isPending}\n              data-testid=\"input-chat-message\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8\"\n              data-testid=\"button-attach\"\n            >\n              <Paperclip size={16} />\n            </Button>\n          </div>\n          \n          <Button\n            onClick={handleVoiceToggle}\n            disabled={sendMessageMutation.isPending}\n            className={`w-12 h-12 rounded-full ${\n              isRecording\n                ? \"bg-destructive hover:bg-destructive/90\"\n                : \"bg-accent hover:bg-accent/90\"\n            }`}\n            data-testid=\"button-voice\"\n          >\n            {isRecording ? (\n              <MicOff className=\"text-destructive-foreground\" size={20} />\n            ) : (\n              <Mic className=\"text-accent-foreground\" size={20} />\n            )}\n          </Button>\n          \n          <Button\n            onClick={handleSendMessage}\n            disabled={!message.trim() || sendMessageMutation.isPending}\n            className=\"w-12 h-12 rounded-full\"\n            data-testid=\"button-send\"\n          >\n            <Send className=\"text-primary-foreground\" size={20} />\n          </Button>\n        </div>\n        \n        {/* Voice Recording Indicator */}\n        {isRecording && (\n          <div className=\"mt-3 bg-accent/10 p-3 rounded-lg flex items-center space-x-3\">\n            <div className=\"w-6 h-6 bg-accent rounded-full voice-recording\"></div>\n            <span className=\"text-accent font-medium\">{t(\"chat.listening\")}</span>\n            <Button\n              onClick={stopRecording}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"ml-auto text-accent hover:text-accent/80\"\n              data-testid=\"button-stop-voice\"\n            >\n              <MicOff size={16} />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10035},"client/src/components/community-tab.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { MessageCircle, Heart, Camera, MapPin, Flame, Users, Send } from \"lucide-react\";\n\ninterface CommunityTabProps {\n  farmerId: string;\n}\n\nexport default function CommunityTab({ farmerId }: CommunityTabProps) {\n  const { t } = useLanguage();\n  const [newPost, setNewPost] = useState(\"\");\n\n  const discussions = [\n    {\n      id: \"1\",\n      author: \"Ravi Kumar\",\n      time: \"2h ago\",\n      content: \"Best organic fertilizer for coconut trees? My trees are not growing well despite regular watering.\",\n      likes: 12,\n      replies: 5,\n      tags: [\"#OrganicFarming\", \"#CoconutTrees\"]\n    },\n    {\n      id: \"2\", \n      author: \"Meera Nair\",\n      time: \"4h ago\",\n      content: \"Anyone tried intercropping with banana plants? What vegetables work best?\",\n      likes: 8,\n      replies: 3,\n      tags: [\"#Intercropping\", \"#Banana\"]\n    },\n    {\n      id: \"3\",\n      author: \"Suresh Pillai\", \n      time: \"6h ago\",\n      content: \"Share: My pepper harvest this year was 40% better using organic methods. Happy to share tips!\",\n      likes: 25,\n      replies: 12,\n      tags: [\"#PeppetFarming\", \"#OrganicMethods\"]\n    }\n  ];\n\n  const popularTopics = [\n    \"#OrganicFarming\",\n    \"#PestControl\", \n    \"#RiceCultivation\",\n    \"#CoconutTrees\",\n    \"#SpiceFarming\",\n    \"#WaterManagement\"\n  ];\n\n  const handlePostSubmit = () => {\n    if (!newPost.trim()) return;\n    // TODO: Implement post submission\n    setNewPost(\"\");\n  };\n\n  return (\n    <div className=\"h-full overflow-y-auto p-4 space-y-4\">\n      {/* Recent Discussions */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <MessageCircle className=\"text-primary\" size={20} />\n            <span>{t(\"community.recentDiscussions\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {discussions.map((discussion) => (\n            <div key={discussion.id} className=\"border-b border-border pb-4 last:border-b-0 last:pb-0\">\n              <div className=\"flex items-start space-x-3\">\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarFallback className=\"bg-primary/20 text-primary\">\n                    {discussion.author.split(' ').map(n => n[0]).join('')}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-2 mb-1\">\n                    <h4 className=\"font-semibold text-sm\">{discussion.author}</h4>\n                    <span className=\"text-xs text-muted-foreground\">{discussion.time}</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-2\">{discussion.content}</p>\n                  \n                  {/* Tags */}\n                  <div className=\"flex flex-wrap gap-1 mb-2\">\n                    {discussion.tags.map((tag) => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"flex items-center space-x-1 text-xs text-muted-foreground hover:text-primary p-0\"\n                      data-testid={`button-like-${discussion.id}`}\n                    >\n                      <Heart size={14} />\n                      <span>{discussion.likes}</span>\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"flex items-center space-x-1 text-xs text-muted-foreground hover:text-primary p-0\"\n                      data-testid={`button-reply-${discussion.id}`}\n                    >\n                      <MessageCircle size={14} />\n                      <span>{discussion.replies} replies</span>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Ask Community */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"text-primary\" size={20} />\n            <span>{t(\"community.askCommunity\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <Textarea\n            value={newPost}\n            onChange={(e) => setNewPost(e.target.value)}\n            placeholder={t(\"community.postPlaceholder\")}\n            rows={3}\n            className=\"resize-none\"\n            data-testid=\"textarea-new-post\"\n          />\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-add-image\">\n                <Camera size={16} />\n              </Button>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-add-location\">\n                <MapPin size={16} />\n              </Button>\n            </div>\n            <Button\n              onClick={handlePostSubmit}\n              disabled={!newPost.trim()}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-post-question\"\n            >\n              <Send size={16} />\n              <span>{t(\"community.postQuestion\")}</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Popular Topics */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Flame className=\"text-accent\" size={20} />\n            <span>{t(\"community.popularTopics\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {popularTopics.map((topic) => (\n              <Button\n                key={topic}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"rounded-full hover:bg-primary/10 hover:text-primary hover:border-primary\"\n                data-testid={`button-topic-${topic.replace('#', '')}`}\n              >\n                {topic}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Community Guidelines */}\n      <Card className=\"bg-muted/50\">\n        <CardContent className=\"pt-6\">\n          <h4 className=\"font-semibold mb-2\">{t(\"community.guidelines.title\")}</h4>\n          <div className=\"space-y-1 text-sm text-muted-foreground\">\n            <p>• {t(\"community.guidelines.respectful\")}</p>\n            <p>• {t(\"community.guidelines.relevant\")}</p>\n            <p>• {t(\"community.guidelines.helpful\")}</p>\n            <p>• {t(\"community.guidelines.accurate\")}</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7394},"client/src/components/market-tab.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { TrendingUp, TrendingDown, Minus, Bell, Calculator, Truck, Clock, ChartLine } from \"lucide-react\";\n\ninterface MarketTabProps {\n  district?: string;\n}\n\ninterface MarketPrice {\n  id: string;\n  crop: string;\n  pricePerKg: string;\n  district: string;\n  change: string;\n  trend: string;\n  date: string;\n}\n\nexport default function MarketTab({ district }: MarketTabProps) {\n  const { t } = useLanguage();\n\n  const { data: marketPrices = [], isLoading } = useQuery({\n    queryKey: [\"/api/market-prices\"],\n    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes\n  });\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case \"up\":\n        return <TrendingUp className=\"text-green-500\" size={16} />;\n      case \"down\":\n        return <TrendingDown className=\"text-red-500\" size={16} />;\n      default:\n        return <Minus className=\"text-muted-foreground\" size={16} />;\n    }\n  };\n\n  const getTrendColor = (trend: string) => {\n    switch (trend) {\n      case \"up\":\n        return \"text-green-500\";\n      case \"down\":\n        return \"text-red-500\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  const getCropIcon = (crop: string) => {\n    const icons: Record<string, string> = {\n      \"Tomatoes\": \"🍅\",\n      \"Chilli\": \"🌶️\",\n      \"Onions\": \"🧅\",\n      \"Rice\": \"🌾\",\n      \"Coconut\": \"🥥\",\n    };\n    return icons[crop] || \"🌱\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">{t(\"market.loading\")}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const risingPrices = (marketPrices as MarketPrice[]).filter((price: MarketPrice) => price.trend === \"up\");\n\n  return (\n    <div className=\"h-full overflow-y-auto p-4 space-y-4\">\n      {/* Price Alerts */}\n      {risingPrices.length > 0 && (\n        <Card className=\"border-accent bg-accent/5\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center space-x-2 text-accent\">\n              <Bell size={20} />\n              <span>{t(\"market.priceAlerts\")}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"bg-accent/10 border border-accent rounded-lg p-4\">\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <TrendingUp className=\"text-accent\" size={20} />\n                <h4 className=\"font-semibold text-accent\">\n                  {t(\"market.pricesRising\", { crop: risingPrices[0]?.crop })}\n                </h4>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                {t(\"market.currentPrice\", { \n                  price: risingPrices[0]?.pricePerKg,\n                  change: risingPrices[0]?.change \n                })}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Today's Market Prices */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <ChartLine className=\"text-primary\" size={20} />\n            <span>{t(\"market.todayPrices\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {(marketPrices as MarketPrice[]).map((price: MarketPrice) => (\n            <div\n              key={price.id}\n              className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:shadow-md transition-shadow\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"text-2xl\">{getCropIcon(price.crop)}</div>\n                <div>\n                  <p className=\"font-semibold\">{price.crop}</p>\n                  <p className=\"text-sm text-muted-foreground\">{t(\"market.perKg\")}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold text-lg\">{price.pricePerKg}</p>\n                <div className={`flex items-center ${getTrendColor(price.trend)}`}>\n                  {getTrendIcon(price.trend)}\n                  <span className=\"text-sm ml-1\">{price.change}</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Best Selling Times */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Clock className=\"text-primary\" size={20} />\n            <span>{t(\"market.bestSellingTimes\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"bg-primary/10 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-primary mb-2\">{t(\"market.thisWeek\")}</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"market.bestDaysVegetables\")}\n            </p>\n          </div>\n          <div className=\"bg-secondary/10 p-4 rounded-lg\">\n            <h4 className=\"font-semibold text-secondary mb-2\">{t(\"market.nextMonth\")}</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"market.riceSeasonDemand\")}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle>{t(\"market.quickActions\")}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Button\n              variant=\"outline\"\n              className=\"p-4 h-auto flex-col space-y-2 hover:bg-primary/10\"\n              data-testid=\"button-price-calculator\"\n            >\n              <Calculator className=\"text-primary\" size={24} />\n              <span className=\"text-sm font-semibold\">{t(\"market.priceCalculator\")}</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"p-4 h-auto flex-col space-y-2 hover:bg-accent/10\"\n              data-testid=\"button-transport-help\"\n            >\n              <Truck className=\"text-accent\" size={24} />\n              <span className=\"text-sm font-semibold\">{t(\"market.transportHelp\")}</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Market Insights */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle>{t(\"market.insights\")}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-start space-x-3 p-3 bg-muted rounded-lg\">\n              <TrendingUp className=\"text-green-500 mt-1\" size={16} />\n              <div>\n                <h5 className=\"font-semibold text-sm\">{t(\"market.demandIncreasing\")}</h5>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t(\"market.organicVegetables\")}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start space-x-3 p-3 bg-muted rounded-lg\">\n              <Clock className=\"text-primary mt-1\" size={16} />\n              <div>\n                <h5 className=\"font-semibold text-sm\">{t(\"market.seasonalTip\")}</h5>\n                <p className=\"text-xs text-muted-foreground\">\n                  {t(\"market.harvestTiming\")}\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7824},"client/src/components/suggestions-tab.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { CalendarDays, Lightbulb, CheckCircle, Clock, AlertTriangle } from \"lucide-react\";\n\ninterface SuggestionsTabProps {\n  farmerId: string;\n  farmerProfile: any;\n}\n\ninterface Suggestion {\n  id: string;\n  title: string;\n  description: string;\n  priority: \"high\" | \"medium\" | \"low\";\n  category: string;\n  isCompleted: boolean;\n  dueDate: string;\n  createdAt: string;\n}\n\nexport default function SuggestionsTab({ farmerId, farmerProfile }: SuggestionsTabProps) {\n  const { t } = useLanguage();\n\n  const { data: suggestions = [], isLoading } = useQuery({\n    queryKey: [\"/api/suggestions\", farmerId],\n    enabled: !!farmerId,\n  });\n\n  const generateSuggestionsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", `/api/generate-suggestions/${farmerId}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suggestions\", farmerId] });\n    },\n  });\n\n  const updateSuggestionMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Suggestion> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/suggestions/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suggestions\", farmerId] });\n    },\n  });\n\n  const completeSuggestion = (id: string) => {\n    updateSuggestionMutation.mutate({\n      id,\n      updates: { isCompleted: true },\n    });\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-destructive/10 text-destructive border-destructive\";\n      case \"medium\":\n        return \"bg-accent/10 text-accent border-accent\";\n      case \"low\":\n        return \"bg-primary/10 text-primary border-primary\";\n      default:\n        return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return <AlertTriangle size={16} />;\n      case \"medium\":\n        return <Clock size={16} />;\n      case \"low\":\n        return <Lightbulb size={16} />;\n      default:\n        return <Lightbulb size={16} />;\n    }\n  };\n\n  const todayTasks = (suggestions as Suggestion[]).filter((s: Suggestion) => \n    !s.isCompleted && new Date(s.dueDate) <= new Date(Date.now() + 24 * 60 * 60 * 1000)\n  );\n\n  const upcomingTasks = (suggestions as Suggestion[]).filter((s: Suggestion) => \n    !s.isCompleted && new Date(s.dueDate) > new Date(Date.now() + 24 * 60 * 60 * 1000)\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">{t(\"suggestions.loading\")}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-y-auto p-4 space-y-4\">\n      {/* Today's Tasks */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2 text-lg\">\n            <CalendarDays className=\"text-primary\" size={20} />\n            <span>{t(\"suggestions.todayTasks\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {todayTasks.length === 0 ? (\n            <div className=\"text-center py-6\">\n              <CheckCircle className=\"mx-auto text-primary mb-2\" size={32} />\n              <p className=\"text-muted-foreground\">{t(\"suggestions.noTasksToday\")}</p>\n            </div>\n          ) : (\n            todayTasks.map((suggestion: Suggestion) => (\n              <div\n                key={suggestion.id}\n                className=\"suggestion-card border border-border rounded-lg p-4 hover:shadow-md transition-all\"\n              >\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-foreground\">{suggestion.title}</h4>\n                    <p className=\"text-sm text-muted-foreground mt-1\">{suggestion.description}</p>\n                  </div>\n                  <Badge className={getPriorityColor(suggestion.priority)} variant=\"outline\">\n                    <div className=\"flex items-center space-x-1\">\n                      {getPriorityIcon(suggestion.priority)}\n                      <span className=\"capitalize\">{suggestion.priority}</span>\n                    </div>\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2 text-xs text-muted-foreground\">\n                    <Clock size={12} />\n                    <span>{t(\"suggestions.dueToday\")}</span>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => completeSuggestion(suggestion.id)}\n                    disabled={updateSuggestionMutation.isPending}\n                    data-testid={`button-complete-${suggestion.id}`}\n                  >\n                    {t(\"suggestions.markComplete\")}\n                  </Button>\n                </div>\n              </div>\n            ))\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Seasonal Recommendations */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2 text-lg\">\n            <Lightbulb className=\"text-primary\" size={20} />\n            <span>{t(\"suggestions.seasonalRecommendations\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"bg-gradient-to-r from-primary/10 to-accent/10 rounded-lg p-4\">\n            <h4 className=\"font-semibold mb-2\">{t(\"suggestions.decemberPlanting\")}</h4>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              {t(\"suggestions.decemberDescription\")}\n            </p>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"bg-background/50 p-3 rounded text-center\">\n                <div className=\"text-2xl mb-1\">🥬</div>\n                <h5 className=\"font-semibold text-sm\">{t(\"suggestions.leafyGreens\")}</h5>\n                <p className=\"text-xs text-muted-foreground\">{t(\"suggestions.perfectSeason\")}</p>\n              </div>\n              <div className=\"bg-background/50 p-3 rounded text-center\">\n                <div className=\"text-2xl mb-1\">🥕</div>\n                <h5 className=\"font-semibold text-sm\">{t(\"suggestions.rootVegetables\")}</h5>\n                <p className=\"text-xs text-muted-foreground\">{t(\"suggestions.goodTime\")}</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Upcoming Tasks */}\n      {upcomingTasks.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center space-x-2 text-lg\">\n              <Clock className=\"text-primary\" size={20} />\n              <span>{t(\"suggestions.upcomingTasks\")}</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {upcomingTasks.map((suggestion: Suggestion) => (\n              <div\n                key={suggestion.id}\n                className=\"border border-border rounded-lg p-4\"\n              >\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h4 className=\"font-semibold text-foreground\">{suggestion.title}</h4>\n                  <Badge className={getPriorityColor(suggestion.priority)} variant=\"outline\">\n                    <span className=\"capitalize\">{suggestion.priority}</span>\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-3\">{suggestion.description}</p>\n                <div className=\"text-xs text-muted-foreground\">\n                  {t(\"suggestions.dueDate\")}: {new Date(suggestion.dueDate).toLocaleDateString()}\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Generate New Suggestions */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center\">\n            <Button\n              onClick={() => generateSuggestionsMutation.mutate()}\n              disabled={generateSuggestionsMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-generate-suggestions\"\n            >\n              {generateSuggestionsMutation.isPending\n                ? t(\"suggestions.generating\")\n                : t(\"suggestions.generateNew\")\n              }\n            </Button>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              {t(\"suggestions.aiPowered\")}\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9300},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as Theme;\n    if (stored) {\n      setTheme(stored);\n    } else if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setTheme(\"dark\");\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1219},"client/src/components/weather-tab.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { Cloud, Sun, CloudRain, Wind, Eye, Droplets, Calendar, Tractor, SprayCan } from \"lucide-react\";\n\ninterface WeatherTabProps {\n  district?: string;\n}\n\ninterface WeatherData {\n  id: string;\n  district: string;\n  temperature: string;\n  humidity: string;\n  rainfall: string;\n  forecast: Array<{\n    day: string;\n    temp: string;\n    condition: string;\n    rain: string;\n  }>;\n  farmingAdvice: string;\n}\n\nexport default function WeatherTab({ district }: WeatherTabProps) {\n  const { t } = useLanguage();\n\n  const { data: weatherData, isLoading } = useQuery({\n    queryKey: [\"/api/weather\", district],\n    enabled: !!district,\n  });\n\n  const getWeatherIcon = (condition: string) => {\n    switch (condition.toLowerCase()) {\n      case \"sunny\":\n        return <Sun className=\"text-yellow-500\" size={24} />;\n      case \"light rain\":\n        return <CloudRain className=\"text-blue-500\" size={24} />;\n      case \"cloudy\":\n        return <Cloud className=\"text-gray-500\" size={24} />;\n      default:\n        return <Cloud className=\"text-gray-500\" size={24} />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">{t(\"weather.loading\")}</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!weatherData) {\n    return (\n      <div className=\"p-4 flex items-center justify-center h-full\">\n        <div className=\"text-center\">\n          <Cloud className=\"mx-auto text-muted-foreground mb-2\" size={48} />\n          <p className=\"text-muted-foreground\">{t(\"weather.noData\")}</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full overflow-y-auto p-4 space-y-4\">\n      {/* Current Weather */}\n      <Card className=\"bg-gradient-to-br from-primary/10 to-accent/10\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-3xl font-bold\">{(weatherData as WeatherData)?.temperature}</h3>\n              <p className=\"text-muted-foreground\">{t(\"weather.partlyCloudy\")}</p>\n              <p className=\"text-sm text-muted-foreground\">{(weatherData as WeatherData)?.district}, Kerala</p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-6xl mb-2\">\n                <Sun className=\"text-accent\" size={64} />\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                {t(\"weather.humidity\")}: {(weatherData as WeatherData)?.humidity}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-background/50 p-3 rounded-lg text-center\">\n              <Eye className=\"text-primary mx-auto mb-1\" size={20} />\n              <p className=\"text-xs text-muted-foreground\">{t(\"weather.visibility\")}</p>\n              <p className=\"font-semibold\">10 km</p>\n            </div>\n            <div className=\"bg-background/50 p-3 rounded-lg text-center\">\n              <Wind className=\"text-primary mx-auto mb-1\" size={20} />\n              <p className=\"text-xs text-muted-foreground\">{t(\"weather.wind\")}</p>\n              <p className=\"font-semibold\">12 km/h</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 5-Day Forecast */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Calendar className=\"text-primary\" size={20} />\n            <span>{t(\"weather.forecast5Day\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {(weatherData as WeatherData)?.forecast?.map((day: any, index: number) => (\n            <div\n              key={index}\n              className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                {getWeatherIcon(day.condition)}\n                <div>\n                  <p className=\"font-semibold\">{day.day}</p>\n                  <p className=\"text-sm text-muted-foreground\">{day.condition}</p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-semibold\">{day.temp}</p>\n                <p className=\"text-sm text-muted-foreground\">{day.rain} rain</p>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Farming Weather Advice */}\n      <Card>\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Tractor className=\"text-primary\" size={20} />\n            <span>{t(\"weather.farmingAdvice\")}</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"bg-primary/10 border-l-4 border-primary p-4 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Droplets className=\"text-primary\" size={16} />\n              <h4 className=\"font-semibold\">{t(\"weather.irrigationTiming\")}</h4>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"weather.irrigationAdvice\")}\n            </p>\n          </div>\n\n          <div className=\"bg-accent/10 border-l-4 border-accent p-4 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <SprayCan className=\"text-accent\" size={16} />\n              <h4 className=\"font-semibold\">{t(\"weather.pesticideApplication\")}</h4>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              {t(\"weather.pesticideAdvice\")}\n            </p>\n          </div>\n\n          {(weatherData as WeatherData)?.farmingAdvice && (\n            <div className=\"bg-secondary/10 border-l-4 border-secondary p-4 rounded-lg\">\n              <h4 className=\"font-semibold mb-2\">{t(\"weather.generalAdvice\")}</h4>\n              <p className=\"text-sm text-muted-foreground\">{(weatherData as WeatherData)?.farmingAdvice}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6476},"client/src/hooks/use-language.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\n\ntype Language = \"en\" | \"ml\";\n\ninterface LanguageContextType {\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  toggleLanguage: () => void;\n  t: (key: string, params?: Record<string, string>) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\nconst translations = {\n  en: {\n    // App\n    \"app.title\": \"FarmBot Kerala\",\n    \"app.subtitle\": \"AI Assistant for Farmers\",\n    \n    // Onboarding\n    \"onboarding.welcome.title\": \"Welcome to FarmBot!\",\n    \"onboarding.welcome.subtitle\": \"Let's set up your farming profile to give you personalized advice.\",\n    \"onboarding.form.name\": \"Your Name\",\n    \"onboarding.form.namePlaceholder\": \"Enter your name\",\n    \"onboarding.form.district\": \"District in Kerala\",\n    \"onboarding.form.districtPlaceholder\": \"Select your district\",\n    \"onboarding.form.landSize\": \"Land Size\",\n    \"onboarding.form.landSizes.small\": \"Small farm\",\n    \"onboarding.form.landSizes.medium\": \"Medium farm\", \n    \"onboarding.form.landSizes.large\": \"Large farm\",\n    \"onboarding.form.landSizes.veryLarge\": \"Very large\",\n    \"onboarding.form.landType\": \"Land Type\",\n    \"onboarding.form.crops\": \"Current/Planned Crops\",\n    \"onboarding.form.experience\": \"Farming Experience\",\n    \"onboarding.form.submit\": \"Start Farming with AI\",\n    \"onboarding.form.submitting\": \"Setting up profile...\",\n    \"onboarding.success.title\": \"Profile Created!\",\n    \"onboarding.success.description\": \"Welcome to FarmBot Kerala. Let's start farming!\",\n    \"onboarding.error.title\": \"Error\",\n    \"onboarding.error.description\": \"Failed to create profile. Please try again.\",\n    \"onboarding.validation.title\": \"Incomplete Information\",\n    \"onboarding.validation.description\": \"Please fill in all required fields.\",\n    \n    // Tabs\n    \"tabs.chat\": \"AI Chat\",\n    \"tabs.suggestions\": \"Smart Tips\",\n    \"tabs.weather\": \"Weather\",\n    \"tabs.market\": \"Market\",\n    \"tabs.community\": \"Community\",\n    \n    // Chat\n    \"chat.welcome.message\": \"Welcome to FarmBot! I'm here to help you with all your farming questions.\",\n    \"chat.welcome.farmer\": \"farmer\",\n    \"chat.placeholder\": \"Ask about farming...\",\n    \"chat.listening\": \"Listening... Speak now\",\n    \"chat.thinking\": \"Thinking...\",\n    \"chat.listen\": \"Listen\",\n    \"chat.voiceMessage\": \"Voice message\",\n    \"chat.error.title\": \"Chat Error\",\n    \"chat.error.description\": \"Failed to send message. Please try again.\",\n    \"chat.suggestions.crops\": \"Best crops for monsoon?\",\n    \"chat.suggestions.fertilizer\": \"Organic fertilizer tips\",\n    \"chat.suggestions.pest\": \"Pest control methods\",\n    \"chat.suggestions.weather\": \"Weather-based farming advice\",\n    \n    // Suggestions\n    \"suggestions.loading\": \"Loading suggestions...\",\n    \"suggestions.todayTasks\": \"Today's Tasks\",\n    \"suggestions.noTasksToday\": \"All tasks completed for today! Great work!\",\n    \"suggestions.markComplete\": \"Mark Complete\",\n    \"suggestions.seasonalRecommendations\": \"Seasonal Recommendations\",\n    \"suggestions.decemberPlanting\": \"December Planting Guide\",\n    \"suggestions.decemberDescription\": \"Perfect time for winter vegetables in Kerala\",\n    \"suggestions.leafyGreens\": \"Leafy Greens\",\n    \"suggestions.perfectSeason\": \"Perfect season\",\n    \"suggestions.rootVegetables\": \"Root Vegetables\", \n    \"suggestions.goodTime\": \"Good time to plant\",\n    \"suggestions.upcomingTasks\": \"Upcoming Tasks\",\n    \"suggestions.dueDate\": \"Due\",\n    \"suggestions.generateNew\": \"Generate New Suggestions\",\n    \"suggestions.generating\": \"Generating suggestions...\",\n    \"suggestions.aiPowered\": \"AI-powered recommendations based on your farm profile\",\n    \n    // Weather\n    \"weather.loading\": \"Loading weather data...\",\n    \"weather.noData\": \"Weather data not available\",\n    \"weather.partlyCloudy\": \"Partly Cloudy\",\n    \"weather.humidity\": \"Humidity\",\n    \"weather.visibility\": \"Visibility\",\n    \"weather.wind\": \"Wind\",\n    \"weather.forecast5Day\": \"5-Day Forecast\",\n    \"weather.farmingAdvice\": \"Farming Advice\",\n    \"weather.irrigationTiming\": \"Irrigation Timing\",\n    \"weather.irrigationAdvice\": \"Best time: Early morning (6-8 AM) to reduce water loss\",\n    \"weather.pesticideApplication\": \"Pesticide Application\",\n    \"weather.pesticideAdvice\": \"Avoid spraying today - wind speed too high (>15 km/h)\",\n    \"weather.generalAdvice\": \"General Advice\",\n    \n    // Market\n    \"market.loading\": \"Loading market data...\",\n    \"market.priceAlerts\": \"Price Alerts\",\n    \"market.pricesRising\": \"{crop} prices rising!\",\n    \"market.currentPrice\": \"Current: {price} ({change} from yesterday)\",\n    \"market.todayPrices\": \"Today's Prices\",\n    \"market.perKg\": \"Per kg\",\n    \"market.bestSellingTimes\": \"Best Selling Times\",\n    \"market.thisWeek\": \"This Week\",\n    \"market.bestDaysVegetables\": \"Tuesday & Friday are best market days for vegetables\",\n    \"market.nextMonth\": \"Next Month\",\n    \"market.riceSeasonDemand\": \"Rice demand increases during festival season\",\n    \"market.quickActions\": \"Quick Actions\",\n    \"market.priceCalculator\": \"Price Calculator\",\n    \"market.transportHelp\": \"Transport Help\",\n    \"market.insights\": \"Market Insights\",\n    \"market.demandIncreasing\": \"Demand Increasing\",\n    \"market.organicVegetables\": \"Organic vegetables seeing higher prices\",\n    \"market.seasonalTip\": \"Seasonal Tip\",\n    \"market.harvestTiming\": \"Plan harvest timing with market demand cycles\",\n    \n    // Community\n    \"community.recentDiscussions\": \"Recent Discussions\",\n    \"community.askCommunity\": \"Ask the Community\",\n    \"community.postPlaceholder\": \"Share your farming question or experience...\",\n    \"community.postQuestion\": \"Post Question\",\n    \"community.popularTopics\": \"Popular Topics\",\n    \"community.guidelines.title\": \"Community Guidelines\",\n    \"community.guidelines.respectful\": \"Be respectful and helpful\",\n    \"community.guidelines.relevant\": \"Keep discussions farming-related\",\n    \"community.guidelines.helpful\": \"Share experiences and knowledge\",\n    \"community.guidelines.accurate\": \"Provide accurate information\"\n  },\n  ml: {\n    // App\n    \"app.title\": \"ഫാം ബോട്ട് കേരള\",\n    \"app.subtitle\": \"കർഷകർക്കുള്ള AI സഹായി\",\n    \n    // Onboarding\n    \"onboarding.welcome.title\": \"ഫാം ബോട്ടിലേക്ക് സ്വാഗതം!\",\n    \"onboarding.welcome.subtitle\": \"വ്യക്തിഗത ഉപദേശങ്ങൾ നൽകാൻ നിങ്ങളുടെ കൃഷി പ്രൊഫൈൽ സജ്ജീകരിക്കാം.\",\n    \"onboarding.form.name\": \"നിങ്ങളുടെ പേര്\",\n    \"onboarding.form.namePlaceholder\": \"നിങ്ങളുടെ പേര് നൽകുക\",\n    \"onboarding.form.district\": \"കേരളത്തിലെ ജില്ല\",\n    \"onboarding.form.districtPlaceholder\": \"നിങ്ങളുടെ ജില്ല തിരഞ്ഞെടുക്കുക\",\n    \"onboarding.form.landSize\": \"ഭൂമിയുടെ വലുപ്പം\",\n    \"onboarding.form.landSizes.small\": \"ചെറിയ കൃഷിയിടം\",\n    \"onboarding.form.landSizes.medium\": \"ഇടത്തരം കൃഷിയിടം\",\n    \"onboarding.form.landSizes.large\": \"വലിയ കൃഷിയിടം\", \n    \"onboarding.form.landSizes.veryLarge\": \"വളരെ വലിയ\",\n    \"onboarding.form.landType\": \"ഭൂമിയുടെ തരം\",\n    \"onboarding.form.crops\": \"നിലവിലുള്ള/പദ്ധതിയിലുള്ള വിളകൾ\",\n    \"onboarding.form.experience\": \"കൃഷി അനുഭവം\",\n    \"onboarding.form.submit\": \"AI യുമായി കൃഷി ആരംഭിക്കുക\",\n    \"onboarding.form.submitting\": \"പ്രൊഫൈൽ സജ്ജീകരിക്കുന്നു...\",\n    \"onboarding.success.title\": \"പ്രൊഫൈൽ സൃഷ്ടിച്ചു!\",\n    \"onboarding.success.description\": \"ഫാം ബോട്ട് കേരളയിലേക്ക് സ്വാഗതം. കൃഷി ആരംഭിക്കാം!\",\n    \"onboarding.error.title\": \"പിശക്\",\n    \"onboarding.error.description\": \"പ്രൊഫൈൽ സൃഷ്ടിക്കുന്നതിൽ പരാജയപ്പെട്ടു. വീണ്ടും ശ്രമിക്കുക.\",\n    \"onboarding.validation.title\": \"അപൂർണ്ണമായ വിവരങ്ങൾ\",\n    \"onboarding.validation.description\": \"ആവശ്യമായ എല്ലാ ഫീൽഡുകളും പൂരിപ്പിക്കുക.\",\n    \n    // Continue with Malayalam translations...\n    // For brevity, showing pattern. In real implementation, all keys would be translated\n    \"tabs.chat\": \"AI ചാറ്റ്\",\n    \"tabs.suggestions\": \"മികച്ച നുറുങ്ങുകൾ\",\n    \"tabs.weather\": \"കാലാവസ്ഥ\",\n    \"tabs.market\": \"വിപണി\",\n    \"tabs.community\": \"സമൂഹം\"\n  }\n};\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<Language>(\"en\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"language\") as Language;\n    if (stored && (stored === \"en\" || stored === \"ml\")) {\n      setLanguage(stored);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"language\", language);\n  }, [language]);\n\n  const toggleLanguage = () => {\n    setLanguage(language === \"en\" ? \"ml\" : \"en\");\n  };\n\n  const t = (key: string, params?: Record<string, string>) => {\n    let translation = (translations[language] as any)[key] || (translations.en as any)[key] || key;\n    \n    if (params) {\n      Object.keys(params).forEach(param => {\n        translation = translation.replace(`{${param}}`, params[param]);\n      });\n    }\n    \n    return translation;\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, setLanguage, toggleLanguage, t }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}\n\nexport function useLanguage() {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within LanguageProvider\");\n  }\n  return context;\n}\n","size_bytes":10209},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-voice.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\n\ninterface UseVoiceReturn {\n  isRecording: boolean;\n  transcript: string;\n  startRecording: () => void;\n  stopRecording: () => void;\n  speak: (text: string) => void;\n  isSupported: boolean;\n}\n\nexport function useVoice(): UseVoiceReturn {\n  const [isRecording, setIsRecording] = useState(false);\n  const [transcript, setTranscript] = useState(\"\");\n  const [recognition, setRecognition] = useState<any | null>(null);\n  const [synthesis] = useState(() => window.speechSynthesis);\n\n  const isSupported = typeof window !== \"undefined\" && \n    (\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window) &&\n    \"speechSynthesis\" in window;\n\n  useEffect(() => {\n    if (!isSupported) return;\n\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\n    const recognitionInstance = new SpeechRecognition();\n    \n    recognitionInstance.continuous = false;\n    recognitionInstance.interimResults = false;\n    recognitionInstance.lang = \"en-IN\"; // English (India) for better Malayalam-English mix\n    \n    recognitionInstance.onresult = (event: any) => {\n      const result = event.results[0][0].transcript;\n      setTranscript(result);\n    };\n    \n    recognitionInstance.onend = () => {\n      setIsRecording(false);\n    };\n    \n    recognitionInstance.onerror = (event: any) => {\n      console.error(\"Speech recognition error:\", event.error);\n      setIsRecording(false);\n    };\n    \n    setRecognition(recognitionInstance);\n  }, [isSupported]);\n\n  const startRecording = useCallback(() => {\n    if (!recognition || isRecording) return;\n    \n    setTranscript(\"\");\n    setIsRecording(true);\n    recognition.start();\n  }, [recognition, isRecording]);\n\n  const stopRecording = useCallback(() => {\n    if (!recognition || !isRecording) return;\n    \n    recognition.stop();\n    setIsRecording(false);\n  }, [recognition, isRecording]);\n\n  const speak = useCallback((text: string) => {\n    if (!synthesis || !text) return;\n    \n    // Stop any ongoing speech\n    synthesis.cancel();\n    \n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = \"en-IN\";\n    utterance.rate = 0.9;\n    utterance.pitch = 1;\n    \n    synthesis.speak(utterance);\n  }, [synthesis]);\n\n  return {\n    isRecording,\n    transcript,\n    startRecording,\n    stopRecording,\n    speak,\n    isSupported\n  };\n}\n","size_bytes":2409},"client/src/lib/farmer-data.ts":{"content":"export interface FarmerProfile {\n  id: string;\n  name: string;\n  district: string;\n  landSize: string;\n  landType: string;\n  crops: string[];\n  experience: string;\n  language: string;\n  createdAt: Date;\n}\n\nexport interface CropCalendar {\n  crop: string;\n  plantingMonths: number[];\n  harvestMonths: number[];\n  careInstructions: {\n    watering: string;\n    fertilizer: string;\n    pestControl: string;\n  };\n}\n\nexport interface FarmingTask {\n  id: string;\n  title: string;\n  description: string;\n  priority: 'high' | 'medium' | 'low';\n  category: 'planting' | 'care' | 'harvest' | 'pest' | 'fertilizer' | 'irrigation' | 'seasonal' | 'planning';\n  dueDate: Date;\n  isCompleted: boolean;\n  crops?: string[];\n  landTypes?: string[];\n}\n\n// Kerala farming calendar based on traditional practices\nexport const KERALA_CROP_CALENDAR: CropCalendar[] = [\n  {\n    crop: \"Rice\",\n    plantingMonths: [6, 7, 11, 12], // June-July (Kharif), Nov-Dec (Rabi)\n    harvestMonths: [10, 11, 3, 4], // Oct-Nov, Mar-Apr\n    careInstructions: {\n      watering: \"Maintain 2-3 cm water level during growing season\",\n      fertilizer: \"Organic compost before planting, urea during tillering\",\n      pestControl: \"Neem oil spray, encourage beneficial insects\"\n    }\n  },\n  {\n    crop: \"Coconut\",\n    plantingMonths: [4, 5, 9, 10], // April-May, Sept-Oct\n    harvestMonths: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], // Year-round\n    careInstructions: {\n      watering: \"Deep watering during dry months, mulching around base\",\n      fertilizer: \"Organic manure twice yearly, potash for better yield\",\n      pestControl: \"Regular inspection for rhinoceros beetle, red palm weevil\"\n    }\n  },\n  {\n    crop: \"Pepper\",\n    plantingMonths: [5, 6], // May-June\n    harvestMonths: [12, 1, 2], // Dec-Feb\n    careInstructions: {\n      watering: \"Regular watering, avoid waterlogging\",\n      fertilizer: \"Organic compost, bone meal for flowering\",\n      pestControl: \"Bordeaux mixture for fungal diseases\"\n    }\n  },\n  {\n    crop: \"Vegetables\",\n    plantingMonths: [10, 11, 12, 1], // Oct-Jan (winter vegetables)\n    harvestMonths: [12, 1, 2, 3], // Dec-Mar\n    careInstructions: {\n      watering: \"Morning watering, drip irrigation preferred\",\n      fertilizer: \"Compost before planting, liquid fertilizer bi-weekly\",\n      pestControl: \"Companion planting, organic sprays\"\n    }\n  },\n  {\n    crop: \"Banana\",\n    plantingMonths: [4, 5, 9, 10], // April-May, Sept-Oct\n    harvestMonths: [1, 2, 3, 7, 8, 9, 10, 11, 12], // Varies by variety\n    careInstructions: {\n      watering: \"Consistent moisture, mulching recommended\",\n      fertilizer: \"High potash fertilizer, organic matter\",\n      pestControl: \"Remove diseased leaves, proper spacing\"\n    }\n  }\n];\n\nexport function getFarmerProfile(): FarmerProfile | null {\n  const stored = localStorage.getItem(\"farmerProfile\");\n  if (!stored) return null;\n  \n  try {\n    const profile = JSON.parse(stored);\n    return {\n      ...profile,\n      createdAt: new Date(profile.createdAt)\n    };\n  } catch (error) {\n    console.error(\"Error parsing farmer profile:\", error);\n    return null;\n  }\n}\n\nexport function saveFarmerProfile(profile: FarmerProfile): void {\n  localStorage.setItem(\"farmerProfile\", JSON.stringify(profile));\n  localStorage.setItem(\"farmerId\", profile.id);\n}\n\nexport function getCurrentSeasonTasks(\n  crops: string[], \n  landType: string,\n  district: string\n): FarmingTask[] {\n  const currentMonth = new Date().getMonth() + 1;\n  const tasks: FarmingTask[] = [];\n\n  // Generate tasks based on crop calendar\n  crops.forEach(crop => {\n    const cropInfo = KERALA_CROP_CALENDAR.find(c => c.crop.toLowerCase() === crop.toLowerCase());\n    if (!cropInfo) return;\n\n    const taskId = `${crop}-${currentMonth}-${Date.now()}`;\n    const dueDate = new Date();\n    dueDate.setDate(dueDate.getDate() + 7); // Default to 7 days from now\n\n    if (cropInfo.plantingMonths.includes(currentMonth)) {\n      tasks.push({\n        id: `plant-${taskId}`,\n        title: `Plant ${crop}`,\n        description: `Optimal time to plant ${crop}. ${cropInfo.careInstructions.watering}`,\n        priority: 'high',\n        category: 'planting',\n        dueDate,\n        isCompleted: false,\n        crops: [crop],\n        landTypes: [landType]\n      });\n    }\n\n    if (cropInfo.harvestMonths.includes(currentMonth)) {\n      tasks.push({\n        id: `harvest-${taskId}`,\n        title: `Harvest ${crop}`,\n        description: `Time to harvest ${crop}. Check for ripeness and weather conditions.`,\n        priority: 'high', \n        category: 'harvest',\n        dueDate,\n        isCompleted: false,\n        crops: [crop],\n        landTypes: [landType]\n      });\n    }\n  });\n\n  // Add seasonal maintenance tasks\n  const seasonalTasks = getSeasonalMaintenanceTasks(currentMonth, landType, district);\n  tasks.push(...seasonalTasks);\n\n  return tasks.slice(0, 5); // Return top 5 tasks\n}\n\nexport function getSeasonalMaintenanceTasks(\n  month: number,\n  landType: string,\n  district: string\n): FarmingTask[] {\n  const tasks: FarmingTask[] = [];\n  const dueDate = new Date();\n  dueDate.setDate(dueDate.getDate() + 14); // 2 weeks from now\n\n  // Monsoon preparation (May-June)\n  if (month >= 5 && month <= 6) {\n    tasks.push({\n      id: `monsoon-prep-${Date.now()}`,\n      title: \"Prepare for Monsoon\",\n      description: \"Clean drainage channels, secure plant supports, check irrigation systems\",\n      priority: 'high',\n      category: 'seasonal',\n      dueDate,\n      isCompleted: false,\n      landTypes: [landType]\n    });\n  }\n\n  // Post-monsoon care (October-November) \n  if (month >= 10 && month <= 11) {\n    tasks.push({\n      id: `post-monsoon-${Date.now()}`,\n      title: \"Post-Monsoon Field Care\",\n      description: \"Check for waterlogging, fungal diseases, and damaged plants\",\n      priority: 'medium',\n      category: 'care',\n      dueDate,\n      isCompleted: false,\n      landTypes: [landType]\n    });\n  }\n\n  // Summer preparation (February-March)\n  if (month >= 2 && month <= 3) {\n    tasks.push({\n      id: `summer-prep-${Date.now()}`,\n      title: \"Summer Water Management\",\n      description: \"Set up shade nets, check irrigation, mulch around plants\",\n      priority: 'high',\n      category: 'irrigation',\n      dueDate,\n      isCompleted: false,\n      landTypes: [landType]\n    });\n  }\n\n  return tasks;\n}\n\nexport function getCropRecommendations(\n  landType: string,\n  district: string,\n  experience: string\n): { crop: string; reason: string; difficulty: 'easy' | 'medium' | 'hard' }[] {\n  const recommendations: { crop: string; reason: string; difficulty: 'easy' | 'medium' | 'hard' }[] = [];\n\n  const difficultyForExperience = (exp: string) => {\n    if (exp === \"New Farmer\") return 'easy';\n    if (exp === \"Experienced\") return 'medium';\n    return 'hard';\n  };\n\n  // Land type specific recommendations\n  if (landType === \"paddy\") {\n    recommendations.push(\n      { crop: \"Rice\", reason: \"Traditional crop, well-suited for wetland cultivation\", difficulty: 'medium' },\n      { crop: \"Coconut\", reason: \"Long-term investment with steady income\", difficulty: 'easy' },\n      { crop: \"Banana\", reason: \"Quick returns, grows well in Kerala climate\", difficulty: 'easy' }\n    );\n  } else if (landType === \"upland\") {\n    recommendations.push(\n      { crop: \"Vegetables\", reason: \"High demand, good returns with proper care\", difficulty: difficultyForExperience(experience) },\n      { crop: \"Pepper\", reason: \"High-value spice crop, traditional in Kerala\", difficulty: 'medium' },\n      { crop: \"Fruits\", reason: \"Diversified income, local market demand\", difficulty: 'medium' }\n    );\n  } else if (landType === \"plantation\") {\n    recommendations.push(\n      { crop: \"Coconut\", reason: \"Main plantation crop in Kerala\", difficulty: 'easy' },\n      { crop: \"Rubber\", reason: \"Good long-term income in suitable areas\", difficulty: 'hard' },\n      { crop: \"Coffee\", reason: \"Premium crop for hill regions\", difficulty: 'medium' }\n    );\n  }\n\n  return recommendations.slice(0, 3);\n}\n\nexport function validateFarmerData(data: Partial<FarmerProfile>): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n\n  if (!data.name || data.name.trim().length < 2) {\n    errors.push(\"Name must be at least 2 characters long\");\n  }\n\n  if (!data.district) {\n    errors.push(\"District is required\");\n  }\n\n  if (!data.landSize) {\n    errors.push(\"Land size is required\");\n  }\n\n  if (!data.landType) {\n    errors.push(\"Land type is required\");\n  }\n\n  if (!data.experience) {\n    errors.push(\"Experience level is required\");\n  }\n\n  if (!data.crops || data.crops.length === 0) {\n    errors.push(\"At least one crop must be selected\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n","size_bytes":8697},"client/src/lib/kerala-data.ts":{"content":"export interface District {\n  value: string;\n  label: string;\n  region: 'north' | 'central' | 'south';\n  climate: 'coastal' | 'midland' | 'highland';\n}\n\nexport interface LandType {\n  value: string;\n  label: string;\n  description: string;\n  icon: string;\n  suitableCrops: string[];\n}\n\nexport interface CropOption {\n  value: string;\n  label: string;\n  icon: string;\n  season: 'all' | 'monsoon' | 'post-monsoon' | 'summer';\n  landTypes: string[];\n}\n\nexport interface ExperienceLevel {\n  value: string;\n  label: string;\n  description: string;\n}\n\n// Kerala Districts with geographical and climatic information\nexport const KERALA_DISTRICTS: District[] = [\n  // Northern Kerala\n  { value: \"kasaragod\", label: \"Kasaragod\", region: \"north\", climate: \"coastal\" },\n  { value: \"kannur\", label: \"Kannur\", region: \"north\", climate: \"coastal\" },\n  { value: \"wayanad\", label: \"Wayanad\", region: \"north\", climate: \"highland\" },\n  { value: \"kozhikode\", label: \"Kozhikode\", region: \"north\", climate: \"coastal\" },\n  { value: \"malappuram\", label: \"Malappuram\", region: \"north\", climate: \"midland\" },\n  \n  // Central Kerala\n  { value: \"palakkad\", label: \"Palakkad\", region: \"central\", climate: \"midland\" },\n  { value: \"thrissur\", label: \"Thrissur\", region: \"central\", climate: \"coastal\" },\n  { value: \"ernakulam\", label: \"Ernakulam\", region: \"central\", climate: \"coastal\" },\n  { value: \"idukki\", label: \"Idukki\", region: \"central\", climate: \"highland\" },\n  { value: \"kottayam\", label: \"Kottayam\", region: \"central\", climate: \"midland\" },\n  \n  // Southern Kerala\n  { value: \"alappuzha\", label: \"Alappuzha\", region: \"south\", climate: \"coastal\" },\n  { value: \"pathanamthitta\", label: \"Pathanamthitta\", region: \"south\", climate: \"midland\" },\n  { value: \"kollam\", label: \"Kollam\", region: \"south\", climate: \"coastal\" },\n  { value: \"thiruvananthapuram\", label: \"Thiruvananthapuram\", region: \"south\", climate: \"coastal\" }\n];\n\n// Land Types in Kerala Agriculture\nexport const LAND_TYPES: LandType[] = [\n  {\n    value: \"paddy\",\n    label: \"Paddy/Wetland\",\n    description: \"For rice cultivation\",\n    icon: \"💧\",\n    suitableCrops: [\"Rice\", \"Coconut\", \"Banana\", \"Fish\", \"Duck\"]\n  },\n  {\n    value: \"upland\",\n    label: \"Upland/Garden\",\n    description: \"For vegetables, fruits\",\n    icon: \"🏔️\",\n    suitableCrops: [\"Vegetables\", \"Fruits\", \"Pepper\", \"Cardamom\", \"Coffee\"]\n  },\n  {\n    value: \"plantation\",\n    label: \"Plantation\",\n    description: \"Coconut, rubber, spices\",\n    icon: \"🌴\",\n    suitableCrops: [\"Coconut\", \"Rubber\", \"Pepper\", \"Cardamom\", \"Coffee\", \"Cashew\"]\n  }\n];\n\n// Major Crops in Kerala\nexport const CROP_OPTIONS: CropOption[] = [\n  {\n    value: \"rice\",\n    label: \"Rice\",\n    icon: \"🌾\",\n    season: \"monsoon\",\n    landTypes: [\"paddy\"]\n  },\n  {\n    value: \"coconut\",\n    label: \"Coconut\",\n    icon: \"🥥\",\n    season: \"all\",\n    landTypes: [\"paddy\", \"upland\", \"plantation\"]\n  },\n  {\n    value: \"pepper\",\n    label: \"Pepper\",\n    icon: \"🌶️\",\n    season: \"post-monsoon\",\n    landTypes: [\"upland\", \"plantation\"]\n  },\n  {\n    value: \"cardamom\",\n    label: \"Cardamom\",\n    icon: \"🌿\",\n    season: \"all\",\n    landTypes: [\"upland\", \"plantation\"]\n  },\n  {\n    value: \"coffee\",\n    label: \"Coffee\",\n    icon: \"☕\",\n    season: \"all\",\n    landTypes: [\"upland\", \"plantation\"]\n  },\n  {\n    value: \"rubber\",\n    label: \"Rubber\",\n    icon: \"🌳\",\n    season: \"all\",\n    landTypes: [\"plantation\"]\n  },\n  {\n    value: \"banana\",\n    label: \"Banana\",\n    icon: \"🍌\",\n    season: \"all\",\n    landTypes: [\"paddy\", \"upland\"]\n  },\n  {\n    value: \"vegetables\",\n    label: \"Vegetables\",\n    icon: \"🥬\",\n    season: \"post-monsoon\",\n    landTypes: [\"paddy\", \"upland\"]\n  },\n  {\n    value: \"fruits\",\n    label: \"Fruits\",\n    icon: \"🍎\",\n    season: \"all\",\n    landTypes: [\"upland\", \"plantation\"]\n  },\n  {\n    value: \"ginger\",\n    label: \"Ginger\",\n    icon: \"🫚\",\n    season: \"monsoon\",\n    landTypes: [\"upland\"]\n  },\n  {\n    value: \"turmeric\",\n    label: \"Turmeric\",\n    icon: \"🟡\",\n    season: \"monsoon\",\n    landTypes: [\"upland\"]\n  },\n  {\n    value: \"cashew\",\n    label: \"Cashew\",\n    icon: \"🥜\",\n    season: \"all\",\n    landTypes: [\"plantation\"]\n  }\n];\n\n// Experience Levels\nexport const EXPERIENCE_LEVELS: ExperienceLevel[] = [\n  {\n    value: \"new\",\n    label: \"New Farmer\",\n    description: \"Less than 2 years\"\n  },\n  {\n    value: \"experienced\",\n    label: \"Experienced\",\n    description: \"2-10 years\"\n  },\n  {\n    value: \"veteran\",\n    label: \"Veteran Farmer\",\n    description: \"10+ years\"\n  }\n];\n\n// Kerala Seasons\nexport interface Season {\n  name: string;\n  months: number[];\n  description: string;\n  mainActivities: string[];\n}\n\nexport const KERALA_SEASONS: Season[] = [\n  {\n    name: \"Pre-Monsoon/Summer\",\n    months: [3, 4, 5],\n    description: \"Hot and dry period, water management critical\",\n    mainActivities: [\n      \"Harvest summer crops\",\n      \"Prepare fields for monsoon\",\n      \"Water management\",\n      \"Shade protection for plants\"\n    ]\n  },\n  {\n    name: \"Southwest Monsoon\",\n    months: [6, 7, 8, 9],\n    description: \"Heavy rainfall period, main planting season\",\n    mainActivities: [\n      \"Plant rice and other monsoon crops\",\n      \"Manage drainage\",\n      \"Pest and disease control\",\n      \"Weed management\"\n    ]\n  },\n  {\n    name: \"Post-Monsoon\",\n    months: [10, 11],\n    description: \"Retreating monsoon, ideal for many crops\",\n    mainActivities: [\n      \"Plant winter vegetables\",\n      \"Harvest monsoon crops\",\n      \"Field preparation\",\n      \"Irrigation setup\"\n    ]\n  },\n  {\n    name: \"Winter/Northeast Monsoon\",\n    months: [12, 1, 2],\n    description: \"Cool and pleasant, good for vegetables and fruits\",\n    mainActivities: [\n      \"Vegetable cultivation\",\n      \"Fruit harvesting\",\n      \"Land preparation\",\n      \"Organic matter addition\"\n    ]\n  }\n];\n\n// Helper functions\nexport function getDistrictByValue(value: string): District | undefined {\n  return KERALA_DISTRICTS.find(d => d.value === value);\n}\n\nexport function getCropsByLandType(landType: string): CropOption[] {\n  return CROP_OPTIONS.filter(crop => crop.landTypes.includes(landType));\n}\n\nexport function getCropsBySeason(season: string): CropOption[] {\n  return CROP_OPTIONS.filter(crop => crop.season === season || crop.season === 'all');\n}\n\nexport function getCurrentSeason(): Season {\n  const currentMonth = new Date().getMonth() + 1;\n  return KERALA_SEASONS.find(season => season.months.includes(currentMonth)) || KERALA_SEASONS[0];\n}\n\nexport function getDistrictsByRegion(region: 'north' | 'central' | 'south'): District[] {\n  return KERALA_DISTRICTS.filter(d => d.region === region);\n}\n\nexport function getDistrictsByClimate(climate: 'coastal' | 'midland' | 'highland'): District[] {\n  return KERALA_DISTRICTS.filter(d => d.climate === climate);\n}\n\n// Market prices for common Kerala crops (base reference prices)\nexport interface CropPriceInfo {\n  crop: string;\n  basePrice: number; // Base price per kg in INR\n  unit: 'kg' | 'quintal' | 'piece';\n  seasonal: boolean;\n  peakMonths: number[];\n  marketCenters: string[];\n}\n\nexport const KERALA_CROP_PRICES: CropPriceInfo[] = [\n  {\n    crop: \"Rice\",\n    basePrice: 2800,\n    unit: \"quintal\",\n    seasonal: false,\n    peakMonths: [4, 5, 11, 12],\n    marketCenters: [\"Palakkad\", \"Alappuzha\", \"Thrissur\"]\n  },\n  {\n    crop: \"Coconut\",\n    basePrice: 25,\n    unit: \"piece\",\n    seasonal: false,\n    peakMonths: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    marketCenters: [\"Pollachi\", \"Kozhikode\", \"Ernakulam\"]\n  },\n  {\n    crop: \"Pepper\",\n    basePrice: 450,\n    unit: \"kg\",\n    seasonal: true,\n    peakMonths: [12, 1, 2, 3],\n    marketCenters: [\"Kochi\", \"Idukki\", \"Wayanad\"]\n  },\n  {\n    crop: \"Cardamom\",\n    basePrice: 1200,\n    unit: \"kg\",\n    seasonal: true,\n    peakMonths: [10, 11, 12, 1],\n    marketCenters: [\"Kumily\", \"Vandiperiyar\", \"Idukki\"]\n  },\n  {\n    crop: \"Coffee\",\n    basePrice: 180,\n    unit: \"kg\",\n    seasonal: true,\n    peakMonths: [12, 1, 2, 3, 4],\n    marketCenters: [\"Wayanad\", \"Idukki\", \"Nelliampathy\"]\n  },\n  {\n    crop: \"Rubber\",\n    basePrice: 160,\n    unit: \"kg\",\n    seasonal: false,\n    peakMonths: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    marketCenters: [\"Kottayam\", \"Pathanamthitta\", \"Kollam\"]\n  },\n  {\n    crop: \"Banana\",\n    basePrice: 30,\n    unit: \"kg\",\n    seasonal: false,\n    peakMonths: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n    marketCenters: [\"Thrissur\", \"Ernakulam\", \"Wayanad\"]\n  }\n];\n\nexport function getCropPriceInfo(cropName: string): CropPriceInfo | undefined {\n  return KERALA_CROP_PRICES.find(\n    price => price.crop.toLowerCase() === cropName.toLowerCase()\n  );\n}\n\nexport function isHarvestSeason(cropName: string, month?: number): boolean {\n  const currentMonth = month || new Date().getMonth() + 1;\n  const cropPrice = getCropPriceInfo(cropName);\n  \n  if (!cropPrice) return false;\n  \n  return cropPrice.peakMonths.includes(currentMonth);\n}\n","size_bytes":8856},"client/src/lib/openai.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_KEY || \"\" \n});\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nexport const DEFAULT_MODEL = \"gpt-5\";\n\nexport interface FarmingContext {\n  name: string;\n  district: string;\n  landSize: string;\n  landType: string;\n  crops: string[];\n  experience: string;\n  language: string;\n}\n\nexport async function generateFarmingResponse(\n  message: string, \n  context?: FarmingContext\n): Promise<string> {\n  try {\n    const contextPrompt = context ? `\n      Farmer Profile:\n      - Name: ${context.name}\n      - Location: ${context.district}, Kerala\n      - Land Size: ${context.landSize}\n      - Land Type: ${context.landType}\n      - Crops: ${context.crops.join(', ')}\n      - Experience: ${context.experience}\n      - Language: ${context.language}\n    ` : '';\n\n    const prompt = `You are FarmBot Kerala, an AI assistant specialized in Kerala farming practices. \n    ${contextPrompt}\n    \n    Farmer's question: \"${message}\"\n    \n    Provide helpful, practical farming advice specific to Kerala's climate, soil, and agricultural practices. \n    Consider the monsoon seasons (June-September), post-monsoon (October-February), and summer (March-May).\n    Keep responses concise but informative. Use simple language appropriate for farmers.\n    Include emojis when appropriate to make responses friendly and engaging.\n    \n    If the question is about:\n    - Crop selection: Consider Kerala's tropical climate and seasonal patterns\n    - Pest control: Focus on organic and sustainable methods popular in Kerala\n    - Fertilizers: Emphasize organic options and local resources\n    - Weather: Reference Kerala's monsoon patterns and seasonal farming calendar\n    - Market: Consider local Kerala markets and traditional crops\n    \n    Response should be natural and conversational, not structured JSON.`;\n\n    const response = await openai.chat.completions.create({\n      model: DEFAULT_MODEL,\n      messages: [{ role: \"user\", content: prompt }],\n      max_tokens: 500,\n    });\n\n    return response.choices[0]?.message?.content || \"I'm sorry, I couldn't process your question. Please try again.\";\n  } catch (error) {\n    console.error(\"OpenAI API error:\", error);\n    throw new Error(\"Unable to connect to AI service. Please check your internet connection and try again.\");\n  }\n}\n\nexport async function generateFarmingSuggestions(\n  context: FarmingContext,\n  count: number = 3,\n  focus?: 'seasonal' | 'daily' | 'emergency'\n): Promise<Array<{\n  title: string;\n  description: string;\n  priority: 'high' | 'medium' | 'low';\n  category: string;\n}>> {\n  try {\n    const currentMonth = new Date().getMonth() + 1;\n    const season = getKeralaSeason(currentMonth);\n    \n    const focusPrompt = focus === 'seasonal' \n      ? `Focus on seasonal activities for ${season} season in Kerala.`\n      : focus === 'daily'\n      ? `Focus on daily/weekly tasks that need immediate attention.`\n      : focus === 'emergency'\n      ? `Focus on urgent issues that require immediate action.`\n      : `Generate a mix of seasonal, maintenance, and planning suggestions.`;\n\n    const prompt = `Generate ${count} farming suggestions for a Kerala farmer with this profile:\n    - District: ${context.district}\n    - Land Size: ${context.landSize}  \n    - Land Type: ${context.landType}\n    - Crops: ${context.crops.join(', ')}\n    - Experience: ${context.experience}\n    \n    Current season: ${season} (Month: ${currentMonth})\n    ${focusPrompt}\n    \n    Provide suggestions in JSON format:\n    {\n      \"suggestions\": [\n        {\n          \"title\": \"Brief action title (max 50 chars)\",\n          \"description\": \"Detailed description with specific steps\", \n          \"priority\": \"high|medium|low\",\n          \"category\": \"planting|care|harvest|pest|fertilizer|irrigation|seasonal|planning\"\n        }\n      ]\n    }`;\n\n    const response = await openai.chat.completions.create({\n      model: DEFAULT_MODEL,\n      messages: [{ role: \"user\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0]?.message?.content || '{\"suggestions\":[]}');\n    return result.suggestions || [];\n  } catch (error) {\n    console.error(\"Error generating farming suggestions:\", error);\n    throw new Error(\"Unable to generate suggestions. Please try again later.\");\n  }\n}\n\nexport async function generateWeatherAdvice(\n  weatherData: {\n    temperature: string;\n    humidity: string;\n    forecast: Array<{ condition: string; rain: string; }>;\n  },\n  context: FarmingContext\n): Promise<string> {\n  try {\n    const prompt = `Based on this weather data for ${context.district}, Kerala:\n    - Current Temperature: ${weatherData.temperature}\n    - Humidity: ${weatherData.humidity}\n    - Forecast: ${weatherData.forecast.map(f => `${f.condition} (${f.rain} rain)`).join(', ')}\n    \n    Farmer Profile:\n    - Land Type: ${context.landType}\n    - Crops: ${context.crops.join(', ')}\n    \n    Provide specific farming advice for the next 3-7 days considering this weather.\n    Focus on irrigation, pest control, harvesting, and crop protection.\n    Keep advice practical and actionable for Kerala farmers.`;\n\n    const response = await openai.chat.completions.create({\n      model: DEFAULT_MODEL,\n      messages: [{ role: \"user\", content: prompt }],\n      max_tokens: 300,\n    });\n\n    return response.choices[0]?.message?.content || \"Weather-based farming advice is currently unavailable.\";\n  } catch (error) {\n    console.error(\"Error generating weather advice:\", error);\n    throw new Error(\"Unable to generate weather advice. Please try again later.\");\n  }\n}\n\nexport function getKeralaSeason(month: number): string {\n  if (month >= 6 && month <= 9) return \"monsoon\";\n  if (month >= 10 && month <= 2) return \"post-monsoon\";\n  return \"summer\";\n}\n\nexport function getSeasonalCrops(season: string, landType: string): string[] {\n  const cropsBySeasonAndLand: Record<string, Record<string, string[]>> = {\n    monsoon: {\n      paddy: [\"Rice\", \"Coconut\", \"Banana\", \"Ginger\", \"Turmeric\"],\n      upland: [\"Pepper\", \"Cardamom\", \"Coffee\", \"Rubber\", \"Vegetables\"],\n      plantation: [\"Coconut\", \"Rubber\", \"Pepper\", \"Cardamom\", \"Coffee\"]\n    },\n    \"post-monsoon\": {\n      paddy: [\"Vegetables\", \"Coconut\", \"Banana\", \"Rice (second crop)\"],\n      upland: [\"Vegetables\", \"Fruits\", \"Spices\", \"Pepper\", \"Cardamom\"],\n      plantation: [\"Coconut\", \"Fruits\", \"Spices\", \"Coffee\"]\n    },\n    summer: {\n      paddy: [\"Summer Rice\", \"Coconut\", \"Banana\", \"Vegetables (with irrigation)\"],\n      upland: [\"Fruits\", \"Vegetables (shade)\", \"Spices\", \"Coconut\"],\n      plantation: [\"Coconut\", \"Mango\", \"Jackfruit\", \"Cashew\"]\n    }\n  };\n\n  return cropsBySeasonAndLand[season]?.[landType] || [\"Coconut\", \"Banana\", \"Vegetables\"];\n}\n","size_bytes":6890},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/main-app.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { Sprout, Moon, Sun, Globe, User, MessageCircle, Lightbulb, Cloud, TrendingUp, Users } from \"lucide-react\";\nimport ChatInterface from \"@/components/chat-interface\";\nimport SuggestionsTab from \"@/components/suggestions-tab\";\nimport WeatherTab from \"@/components/weather-tab\";\nimport MarketTab from \"@/components/market-tab\";\nimport CommunityTab from \"@/components/community-tab\";\n\nexport default function MainAppPage() {\n  const [, setLocation] = useLocation();\n  const { theme, toggleTheme } = useTheme();\n  const { language, toggleLanguage, t } = useLanguage();\n  const [farmerId, setFarmerId] = useState<string | null>(null);\n  const [farmerProfile, setFarmerProfile] = useState<any>(null);\n\n  useEffect(() => {\n    const storedFarmerId = localStorage.getItem(\"farmerId\");\n    const storedProfile = localStorage.getItem(\"farmerProfile\");\n    \n    if (!storedFarmerId) {\n      setLocation(\"/\");\n      return;\n    }\n    \n    setFarmerId(storedFarmerId);\n    if (storedProfile) {\n      setFarmerProfile(JSON.parse(storedProfile));\n    }\n  }, [setLocation]);\n\n  if (!farmerId) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 flex items-center justify-between sticky top-0 z-50\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <Sprout className=\"text-primary-foreground\" size={16} />\n          </div>\n          <h1 className=\"text-lg font-bold text-foreground\">{t(\"app.title\")}</h1>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setLocation(\"/\")}\n            data-testid=\"button-profile\"\n          >\n            <User size={16} />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleLanguage}\n            data-testid=\"button-main-language-toggle\"\n          >\n            <Globe size={16} className=\"mr-1\" />\n            {language === \"en\" ? \"EN\" : \"മലയാളം\"}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleTheme}\n            data-testid=\"button-main-theme-toggle\"\n          >\n            {theme === \"light\" ? <Moon size={16} /> : <Sun size={16} />}\n          </Button>\n        </div>\n      </header>\n\n      {/* Main Content with Tabs */}\n      <div className=\"flex-1 overflow-hidden\">\n        <Tabs defaultValue=\"chat\" className=\"h-full flex flex-col\">\n          {/* Tab Navigation */}\n          <div className=\"bg-card border-b border-border px-4 py-2 overflow-x-auto\">\n            <TabsList className=\"inline-flex w-auto min-w-max space-x-2\">\n              <TabsTrigger \n                value=\"chat\" \n                className=\"flex items-center space-x-2 whitespace-nowrap\"\n                data-testid=\"tab-chat\"\n              >\n                <MessageCircle size={16} />\n                <span>{t(\"tabs.chat\")}</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"suggestions\" \n                className=\"flex items-center space-x-2 whitespace-nowrap\"\n                data-testid=\"tab-suggestions\"\n              >\n                <Lightbulb size={16} />\n                <span>{t(\"tabs.suggestions\")}</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"weather\" \n                className=\"flex items-center space-x-2 whitespace-nowrap\"\n                data-testid=\"tab-weather\"\n              >\n                <Cloud size={16} />\n                <span>{t(\"tabs.weather\")}</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"market\" \n                className=\"flex items-center space-x-2 whitespace-nowrap\"\n                data-testid=\"tab-market\"\n              >\n                <TrendingUp size={16} />\n                <span>{t(\"tabs.market\")}</span>\n              </TabsTrigger>\n              <TabsTrigger \n                value=\"community\" \n                className=\"flex items-center space-x-2 whitespace-nowrap\"\n                data-testid=\"tab-community\"\n              >\n                <Users size={16} />\n                <span>{t(\"tabs.community\")}</span>\n              </TabsTrigger>\n            </TabsList>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"flex-1 overflow-hidden\">\n            <TabsContent value=\"chat\" className=\"h-full m-0\">\n              <ChatInterface farmerId={farmerId} farmerProfile={farmerProfile} />\n            </TabsContent>\n            \n            <TabsContent value=\"suggestions\" className=\"h-full m-0\">\n              <SuggestionsTab farmerId={farmerId} farmerProfile={farmerProfile} />\n            </TabsContent>\n            \n            <TabsContent value=\"weather\" className=\"h-full m-0\">\n              <WeatherTab district={farmerProfile?.district} />\n            </TabsContent>\n            \n            <TabsContent value=\"market\" className=\"h-full m-0\">\n              <MarketTab district={farmerProfile?.district} />\n            </TabsContent>\n            \n            <TabsContent value=\"community\" className=\"h-full m-0\">\n              <CommunityTab farmerId={farmerId} />\n            </TabsContent>\n          </div>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5779},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useLanguage } from \"@/hooks/use-language\";\nimport { Sprout, Moon, Sun, Globe } from \"lucide-react\";\nimport { KERALA_DISTRICTS, LAND_TYPES, CROP_OPTIONS, EXPERIENCE_LEVELS } from \"@/lib/kerala-data\";\n\nexport default function OnboardingPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { theme, toggleTheme } = useTheme();\n  const { language, toggleLanguage, t } = useLanguage();\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    district: \"\",\n    landSize: \"\",\n    landType: \"\",\n    crops: [] as string[],\n    experience: \"\",\n    language: language\n  });\n\n  const createFarmerMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await apiRequest(\"POST\", \"/api/farmers\", data);\n      return response.json();\n    },\n    onSuccess: (farmer) => {\n      localStorage.setItem(\"farmerId\", farmer.id);\n      localStorage.setItem(\"farmerProfile\", JSON.stringify(farmer));\n      toast({\n        title: t(\"onboarding.success.title\"),\n        description: t(\"onboarding.success.description\"),\n      });\n      setLocation(\"/app\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: t(\"onboarding.error.title\"),\n        description: error.message || t(\"onboarding.error.description\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    if (!formData.name || !formData.district || !formData.landSize || !formData.landType || !formData.experience) {\n      toast({\n        title: t(\"onboarding.validation.title\"),\n        description: t(\"onboarding.validation.description\"),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createFarmerMutation.mutate(formData);\n  };\n\n  const toggleCrop = (crop: string) => {\n    setFormData(prev => ({\n      ...prev,\n      crops: prev.crops.includes(crop)\n        ? prev.crops.filter(c => c !== crop)\n        : [...prev.crops, crop]\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border p-4 flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n            <Sprout className=\"text-primary-foreground\" size={20} />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">{t(\"app.title\")}</h1>\n            <p className=\"text-sm text-muted-foreground\">{t(\"app.subtitle\")}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleLanguage}\n            data-testid=\"button-language-toggle\"\n          >\n            <Globe size={16} className=\"mr-1\" />\n            {language === \"en\" ? \"EN\" : \"മലയാളം\"}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleTheme}\n            data-testid=\"button-theme-toggle\"\n          >\n            {theme === \"light\" ? <Moon size={16} /> : <Sun size={16} />}\n          </Button>\n        </div>\n      </header>\n\n      {/* Onboarding Content */}\n      <div className=\"flex-1 p-6 max-w-md mx-auto w-full\">\n        <div className=\"space-y-6\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-32 h-32 bg-primary/10 rounded-full mx-auto flex items-center justify-center\">\n              <Sprout className=\"text-primary\" size={64} />\n            </div>\n            <h2 className=\"text-2xl font-bold text-primary\">{t(\"onboarding.welcome.title\")}</h2>\n            <p className=\"text-muted-foreground text-lg\">{t(\"onboarding.welcome.subtitle\")}</p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\" className=\"text-sm font-semibold mb-2 block\">\n                {t(\"onboarding.form.name\")}\n              </Label>\n              <Input\n                id=\"name\"\n                type=\"text\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                placeholder={t(\"onboarding.form.namePlaceholder\")}\n                className=\"text-lg p-4\"\n                data-testid=\"input-name\"\n              />\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">\n                {t(\"onboarding.form.district\")}\n              </Label>\n              <Select\n                value={formData.district}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, district: value }))}\n              >\n                <SelectTrigger className=\"text-lg p-4\" data-testid=\"select-district\">\n                  <SelectValue placeholder={t(\"onboarding.form.districtPlaceholder\")} />\n                </SelectTrigger>\n                <SelectContent>\n                  {KERALA_DISTRICTS.map((district) => (\n                    <SelectItem key={district.value} value={district.value}>\n                      {district.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">\n                {t(\"onboarding.form.landSize\")}\n              </Label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {[\"< 1 Acre\", \"1-5 Acres\", \"5-10 Acres\", \"10+ Acres\"].map((size) => (\n                  <Button\n                    key={size}\n                    variant={formData.landSize === size ? \"default\" : \"outline\"}\n                    onClick={() => setFormData(prev => ({ ...prev, landSize: size }))}\n                    className=\"p-4 h-auto flex-col\"\n                    data-testid={`button-land-size-${size.replace(/[^a-zA-Z0-9]/g, \"\")}`}\n                  >\n                    <div className=\"text-lg font-semibold\">{size}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {size === \"< 1 Acre\" && t(\"onboarding.form.landSizes.small\")}\n                      {size === \"1-5 Acres\" && t(\"onboarding.form.landSizes.medium\")}\n                      {size === \"5-10 Acres\" && t(\"onboarding.form.landSizes.large\")}\n                      {size === \"10+ Acres\" && t(\"onboarding.form.landSizes.veryLarge\")}\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">\n                {t(\"onboarding.form.landType\")}\n              </Label>\n              <div className=\"grid grid-cols-1 gap-3\">\n                {LAND_TYPES.map((type) => (\n                  <Button\n                    key={type.value}\n                    variant={formData.landType === type.value ? \"default\" : \"outline\"}\n                    onClick={() => setFormData(prev => ({ ...prev, landType: type.value }))}\n                    className=\"p-4 text-left h-auto justify-start\"\n                    data-testid={`button-land-type-${type.value}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-primary text-xl\">{type.icon}</div>\n                      <div>\n                        <div className=\"font-semibold\">{type.label}</div>\n                        <div className=\"text-sm text-muted-foreground\">{type.description}</div>\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">\n                {t(\"onboarding.form.crops\")}\n              </Label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {CROP_OPTIONS.map((crop) => (\n                  <Button\n                    key={crop.value}\n                    variant={formData.crops.includes(crop.value) ? \"default\" : \"outline\"}\n                    onClick={() => toggleCrop(crop.value)}\n                    className=\"p-3 h-auto flex-col\"\n                    data-testid={`button-crop-${crop.value}`}\n                  >\n                    <div className=\"text-xl mb-2\">{crop.icon}</div>\n                    <div className=\"text-sm font-semibold\">{crop.label}</div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"text-sm font-semibold mb-2 block\">\n                {t(\"onboarding.form.experience\")}\n              </Label>\n              <div className=\"grid grid-cols-1 gap-3\">\n                {EXPERIENCE_LEVELS.map((level) => (\n                  <Button\n                    key={level.value}\n                    variant={formData.experience === level.value ? \"default\" : \"outline\"}\n                    onClick={() => setFormData(prev => ({ ...prev, experience: level.value }))}\n                    className=\"p-4 text-left h-auto justify-start\"\n                    data-testid={`button-experience-${level.value}`}\n                  >\n                    <div>\n                      <div className=\"font-semibold\">{level.label}</div>\n                      <div className=\"text-sm text-muted-foreground\">{level.description}</div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <Button\n            onClick={handleSubmit}\n            disabled={createFarmerMutation.isPending}\n            className=\"w-full p-4 text-lg font-semibold\"\n            data-testid=\"button-complete-onboarding\"\n          >\n            {createFarmerMutation.isPending \n              ? t(\"onboarding.form.submitting\")\n              : t(\"onboarding.form.submit\")\n            }\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10556},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}